<?php
/**
 * eds_report.module - Custom Report building functionality for the EDsuite module collection
 * $Id$
 */

global $tooltips;
$tooltips = array(
    'add_body' => t("Click 'Add link' to include this information to your Custom Report"),
    'remove_body' => t("Click 'Remove link' to clear this information from your Custom Report"),
    'add_body_all' => t("Click here to select all of the information that is contained within this topic.  This Information will then be added to your Custom Report."),
    'remove_body_all' => t("Click 'Remove link' to clear this information from your Custom Report"),
    );

function _node_type_compare($a, $b)
{
    /* Sort them according to enabled/disabled */
    $status = $b['status'] - $a['status'];
    if ($status) {
        return $status;
    }
    
    /* If enabled sorty by weight and then by name */
    if ($a['status'] && ($a['weight'] != $b['weight'])) {
        return $a['weight'] - $b['weight'];
    } else {
        return strcmp($a['type'], $b['type']);
    }
}

function add_session_variable() 
{
	// HTTP post & session ID & valid variables required
    if (is_null($_REQUEST['sid'])) {

		return false;
	}
	
	if (isset($_REQUEST['node_type'])) {
	    $node_type = $_REQUEST['node_type'];
	}	

	foreach ($_REQUEST as $name => $value) {
	    // add new node to session
		if ($name == 'nid_list') {
		    foreach ($value as $nid) {

			    $_SESSION['nodes_in_report'][$node_type][$nid] = $nid;
		    }
		}
	}
	return true;
}

/**
 * This will add all the necessary JS and CSS files, and only do it once.
 * Using this here allows us to call this at the time of link-creation rather
 * than once per page, since not all pages need the supporting code.
 */
function eds_report_add_files()
{
    static $already_added = FALSE;
    if ($already_added) {
      return; 
    }
    $already_added = TRUE;

    $base_url = "http://". $_SERVER['HTTP_HOST'] . base_path();

    if (array_key_exists(session_name(), $_COOKIE)) {
        $sid = $_COOKIE[session_name()];
    } else {
        $sid = '';
    }
    
    /* New variables are adding in script, that have to be available in eds_report_session.js */
    $settings = array(
        'edsuite' => array(
            'report' => array(
                'path_add_node' => url("eds/report/node/add"),
                'path_remove_node' => url("eds/report/node/remove"),
                'path_reset' => url("eds/report/reset"),
                'sess' => $sid,
                'information_url' => url('eds/report/information'),
                'report_url' => url('eds/report'),
                'add_text' => t("Add to Report"),
                'remove_text' => t("Remove from Report"),
                'add_all_text' => t("Add All Content to Report"),
                'remove_all_text' => t("Remove All Content from Report"),
                ),
            ),
        );
    drupal_add_js($settings, 'setting');

    drupal_add_css(drupal_get_path('module', 'eds_report') . '/support/css/report_links.css', 'module');
    drupal_add_js(drupal_get_path('module', 'eds_report') .'/js/eds_report_session.js');
    //edsuite_load_tooltips();
}

/**
 * Return "add" or "remove" link
 * This link add/remove node from custom report
 */
function eds_report_add_link($nid, $type)
{
    eds_report_add_files();
    $add_link = '';
    
    $nid_list = array($nid);
    if ($type == 'book' && !preg_match('/eds\/report/', drupal_get_path_alias($_GET['q']))) {
        /* Load children list for the book node type */
        $nid_list = array_merge($nid_list, eds_profile_book_children_list($nid));
    }
        
    if ($nid == arg(1) && $type == 'book') {
        
        // Full node has children
        if (!isset($_SESSION['nodes_in_report'][$type])) {
            $add_link = theme('report_all_link', array('text' => t("Add All Content to Report"), 'class' => 'add_all', 'nid_list' => $nid_list, 'node_type' => $type));
        } else {
            $count = 0;
            
            foreach ($nid_list as $nid) {
                if (isset($_SESSION['nodes_in_report'][$type]) 
                    && !array_key_exists($nid, $_SESSION['nodes_in_report'][$type])) {
                    // The node isn't added to $_SESSION['nodes_in_report']
                    ++$count;
                }
            }
                
            if ($count > 0) {
                $add_link = theme('report_all_link', array('text' => t("Add All Content to Report"), 'class' => 'add_all', 'nid_list' => $nid_list, 'node_type' => $type));
            } else {
                $add_link = theme('report_all_link', array('text' => t("Remove All Content from Report"), 'class' => 'remove_all', 'nid_list' => $nid_list, 'node_type' => $type));
            }
        }

    } else {
        if (!isset($_SESSION['nodes_in_report'][$type])) {
            $add_link = theme('report_link', array('text' => t("Add to Report"), 'class' => 'add', 'nid_list' => $nid_list, 'node_type' => $type));
        } else {
            $count = 0;
            
            foreach ($nid_list as $nid) {
                if (!array_key_exists($nid, $_SESSION['nodes_in_report'][$type])) {
                    // The node isn't added to $_SESSION['nodes_in_report']
                    ++$count; 
                }                        
            }
            
            if ($count > 0) {
                $add_link = theme('report_link', array('text' => t("Add to Report"), 'class' => 'add', 'nid_list' => $nid_list, 'node_type' => $type));
            } else {
                $add_link = theme('report_link', array('text' => t("Remove from Report"), 'class' => 'remove', 'nid_list' => $nid_list, 'node_type' => $type));
            }
        }
    }
    
    return $add_link;
}

/**
 * Define the settings form.
 * It displays all the existing node types on the page 
 * to select those nodes which the link (add/remove) has to be added to.
 */
function eds_report_admin_settings() 
{

    foreach (array_keys(node_type_get_names()) as $key => $type) {
        $node_types_sys[$key] = array('alias' => $type, 'heading' => $type, 'status' => 0, 'type' => $type, 'weight' => 0);
    }

    $report_nodetypes = variable_get('eds_report_nodetypes', $node_types_sys);

    /* Set the default values for all types (not just the ones previously saved) */
    foreach ($report_nodetypes as $type => $values) {
        $node_types[$type] = $values;
    }

    usort($node_types, '_node_type_compare'); /* Sort them according to weight and/or name */
    $form['node_types'] = array(
        '#title'       => t('Node types for inclusion in the report'),
        '#tree'        => true,
    );

    foreach ($node_types as $i => $values) {
        $type = $values['type'];
       	$form['node_types'][$type]['status'] = array(
            '#type'          => 'checkbox',
            '#title'         => ucfirst($values['type']),
            '#default_value' => $values['status'],
        );
       	$form['node_types'][$type]['type'] = array(
            '#type'          => 'hidden',
            '#value'         => $values['type'],
        );
       	$form['node_types'][$type]['alias'] = array(
            '#type'          => 'textfield',
            '#default_value' => $values['alias'],
            '#size'          => 15
        );
       	$form['node_types'][$type]['heading'] = array(
            '#type'          => 'textfield',
            '#default_value' => $values['heading'],
            '#size'          => 30
        );
       	$form['node_types'][$type]['weight'] = array(
            '#type'          => 'weight',
            '#default_value' => $values['weight'],
       	);
    }

    $form['contact_info'] = array(
        '#type'          => 'textarea',
        '#title'         => t('Contact Information'),
        '#description'   => t('Enter the contact information that will be included in the header of the custom report.'),
        '#default_value' => variable_get('eds_report_contact_info', ''),
        '#rows'          => 6,
    );

    $form['eds_report_logo'] = array(
        '#type'          => 'textfield',
        '#title'         => t('Path to Logo for Custom Report'),
        '#description'   => t('This file will be used as the logo in the header of the custom report.  This overrides the logo setting in !settings .', array('!settings' => l(t('EDSuite 2.0 Settings'), 'admin/edsuite/settings'))),
        '#default_value' => variable_get('eds_report_logo', ''),
        '#size'          => 60,
        '#maxlength'     => 256
    );

    $form['eds_report_logo_file'] = array(
        '#type'          => 'file',
        '#title'         => t('Upload Logo for Custom Report'),
        '#description'   => t('Upload an image file if you do not have one or know the path to one.'),
    );

    $form['submit'] = array(
        '#type'  => 'submit', 
        '#value' => t('Save configuration') 
    );

    $form['#attributes'] = array('enctype' => 'multipart/form-data');

    return $form;
}

/**
 * Save settings in the variable
 */
function eds_report_admin_settings_submit($form_id, $form_values)
{
    variable_set('eds_report_nodetypes', $form_values['values']['node_types']);
    variable_set('eds_report_contact_info', $form_values['values']['contact_info']);

//    $directory_path = file_directory_path();
//    file_check_directory($directory_path, FILE_CREATE_DIRECTORY, 'file_directory_path');


    $file = file_save_upload('eds_report_logo_file', array(
            'file_validate_is_image' => array(),
            'file_validate_extensions' => array('png gif jpg jpeg'),
        ));
    if ($file) {
        $file->status = FILE_STATUS_PERMANENT;
        file_save($file);
        if ($file = file_move($file, 'public://')) {

            variable_set('eds_report_logo', file_create_url($file->uri));
            $form_state['values']['file'] = $file;
        }
        else {
            form_set_error('eds_report_logo_file', t('There was an error in uploading your file.  Please try again.'));
        }
    }
//    if ($file = file_check_upload('eds_report_logo_file')) {
//        if ($info = image_get_info($file->filepath)) {
//            if ($file = file_save_upload('eds_report_logo_file', $file->filename, 1)) {
//                variable_set('eds_report_logo', $file->filepath);
//            }
//        } else {
//            form_set_error('eds_report_logo_file', t('Only JPEG, PNG and GIF images are allowed to be used.'));
//        }
//    } else {
//        variable_set('eds_report_logo', $form_values['eds_report_logo']);
//    }
    
    drupal_set_message(t('The configuration options have been saved.'));
}

/**
* Implements hook_block_info().
*/
function eds_report_block_info() {
    $blocks['custom_report_detail'] = array(
        'info' => t('Custom report detail'),
        'weight' => 0, 
        'enabled' => 1, 
        'region' => 'header',
        'pages' => "contact\nadmin\nadmin/*\n*/*/pdf\neds/report",
    );
    return $blocks;
}

function eds_report_block_configure($delta = '')
{
    $form = array();
    
    switch($delta) {
        case 'custom_report_detail':
            $form['icons'] = array(
                '#type' => 'checkbox',
                '#title' => t('Display icons?'),
                '#default_value' => variable_get('eds_report_block_display_icons', 1),
            );
            break;
    }
    return $form;
}

function eds_report_block_save($delta = '', $edit = array())
{
    switch($delta) {
        case 'custom_report_detail':
            variable_set('eds_report_block_display_icons', $edit['icons']);
            break;
    }  
}

/**
* Implements hook_block_view().
*
*/
function eds_report_block_view($delta = '') {
    
    switch($delta) {
        case 'custom_report_detail':
            eds_report_add_files();
            $block = array(
                'subject' => t(''),
                'content' => eds_report_display_block(),
            );
            break;
    }      
    
    return $block;
}

function eds_report_custom_report()
{
    $report_nodetypes = variable_get('eds_report_nodetypes', array());
    
    foreach ($report_nodetypes as $type => $value) {
        if ($value['status'] != 1) {
            continue;
        }
        $data[$type] = '';
        $nodes = eds_report_node_list($type);

        $i = 0;
        $c = count($nodes);
        if ($c < 1) {
            continue;
        }

        foreach ($nodes as $nid) {
            $i++;
            $node = node_load($nid);
            // echo '<pre>';
            // var_dump($node);
            // echo '</pre>';
            // exit;

            /* If the node is not published do not include in the report */
            if ($node->status !=1 ) {
                continue;
            }

            /* Add "back to top" links at the bottom of the node content */
			if (isset($node->body)) {
	            $node->body['und'][0]['value'] .= '<a href="#top" class="to_top">' . t('back to top') . '</a>';
	            if (isset($node->body['und'][0]['safe_value'])){
	                $node->body['und'][0]['safe_value'] .= '<a href="#top" class="to_top">' . t('back to top') . '</a>';
	            }
			}

            if ($i == $c) {
                $data[$type] .= '<div class="last">';
            } elseif ($i == 1) {
                $data[$type] .= '<div class="first">';
            }

            $teaser = $type == 'eds_properties'?'full':'full';
            $teaser = $type == 'book'?'book_report':$teaser;
            $tmp_node_view = node_view($node, $teaser);
            $data[$type] .= render($tmp_node_view);
            if ($i == $c || $i == 1) {
                $data[$type] .= '</div>';
            }
        }
    }

    $data['logo'] = variable_get('eds_report_logo', '');
    $data['contact_info'] = variable_get('eds_report_contact_info', '');
    
    drupal_add_css(drupal_get_path('module', 'eds_report') . '/support/css/report.css');
    drupal_add_css(drupal_get_path('module', 'eds_report') . '/support/css/report-print.css', 'module', 'print');

    return(theme('custom_report', array('data' => $data)));
}

/**
 * Output pdf Custom Report
 */
function eds_report_custom_report_pdf() 
{
    drupal_set_header('Content-Type: text/html; charset=utf-8');
    print theme('custom_report_pdf', array('url' => url('eds/report', "nodes=" . urlencode(serialize($_SESSION['nodes_in_report'])), null, true)));
    module_invoke_all('exit');
	exit;
}

/**
 * The logic behind displaying the report block
 */
function eds_report_display_block()
{
    drupal_add_css(drupal_get_path('module', 'eds_report') . '/support/css/report_block.css', 'module');
    drupal_add_js(drupal_get_path('module', 'eds_report') . '/js/eds_report_block.js', 'module');

    $vars = array();
    foreach (variable_get('eds_report_nodetypes', array()) as $type => $value) {
        if ($value['status'] == 1) {
            $vars[$type] = isset($_SESSION['nodes_in_report'][$type]) ? count($_SESSION['nodes_in_report'][$type]) : 0;
        }
    }

    if (array_key_exists(session_name(), $_COOKIE)) {
        $vars['sid'] = $_COOKIE[session_name()];
    } else {
        $vars['sid'] = '';
    }
    
    return theme('custom_report_block', array('vars' => $vars));
}

/**
 * Implementation of hook_form_alter().
 */
function eds_report_form_alter($form_id, &$form)
{
    if ($form_id == 'system_site_information_settings') {
        foreach ($form as $key => $value) {
            if ($key == 'buttons') {
                $new_form['eds_report'] = array('#value' => '<div class="eds-report"><p>' . t('Do not forget to edit ') . l(t('the EDSuite Report settings'), 'admin/edsuite/report') . '.</p></div>');
            }
            $new_form[$key] = $value;
        }
        $form = $new_form;
    }
}

/**
 * The data displayed when people try to view an empty custom report
 */
function eds_report_information_node()
{
    return theme('report_information', array('text' => 'Please use the &quot;Add&quot; &amp;&nbsp;&quot;Add All Content&quot; links seen throughout this website to add content to your custom report.&nbsp; At least one piece of content must be added to the custom report before it will become accessible.'));
}

/**
 * Implementation of hook_menu().
 */
function eds_report_menu()
{
    $items = array();


    $items['admin/edsuite/report'] = array(
        'title'              => t('Report settings'),
        'page callback'           => 'drupal_get_form',
        'page arguments' => array('eds_report_admin_settings'),
        'access callback' => 'user_access',
        'access arguments'             => array('administer site configuration'),
        'description'        => t('Change how annotations behave.')
    );

    $items['eds/report/pdf'] = array(
        'title'    => t('Custom Report PDF'),
        'page callback' => 'eds_report_custom_report_pdf',
        'access callback' => 'user_access',
        'access arguments'   => array('access content as PDF'),
        'type'     => MENU_CALLBACK
    );

    $items['eds/report'] = array(
        'title'    => t('Custom Report'),
        'page callback' => 'eds_report_custom_report',
        'access callback' => 'user_access',
        'access arguments'   => array('access eds report'),
        'type'     => MENU_CALLBACK
    );

    $items['eds/report/node/add'] = array(
        'page callback' => 'set_eds_report_session_variable',
        'access callback' => 'user_access',
        'access arguments'   => array('access eds report'),
        'type'     => MENU_CALLBACK
    );

    $items['eds/report/reset'] = array(
        'page callback' => 'reset_eds_report_session_variable',
        'access callback' => 'user_access',
        'access arguments'   => array('access eds report'),
        'type'     => MENU_CALLBACK
    );

    $items['eds/report/node/remove'] = array(
        'page callback' => 'remove_eds_report_session_variable',
        'access callback' => 'user_access',
        'access arguments'   => array('access eds report'),
        'type'     => MENU_CALLBACK
    );

    $items['eds/report/information'] = array(
        'title'    => t('About Custom Reporting'),
        'page callback' => 'eds_report_information_node',
        'access callback' => 'user_access',
        'access arguments'   => array('access eds report'),
        'type'     => MENU_CALLBACK
    );

	return $items;
}

function eds_report_node_view($node, $view_mode, $langcode)
{

    $report_nodetypes = variable_get('eds_report_nodetypes', array());

    if (array_key_exists($node->type, $report_nodetypes)) {
        if ($report_nodetypes[$node->type]['status'] == 1) {
            if (!($node->type == 'book' && $view_mode == 'preview_list')) {
                $node->add_report = eds_report_add_link($node->nid, $node->type);
            }
        }
    }
}

/**
 * Creates and returns an array indicating how many of which nodes types are saved in the session.
 */
function eds_report_node_count()
{
    foreach (variable_get('eds_report_nodetypes', array()) as $type => $value) {
        if ($value['status'] == 1) {
            $counts[$type] = isset($_SESSION['nodes_in_report'][$type]) ? count($_SESSION['nodes_in_report'][$type]) : 0;
        }
    }
    return($counts);
}

/**
 * Prepares and returns a list of nodes added to the custom report session data.
 * This is used in the custom_report views.
 *
 * The $node_type (right now) is one of "book", "story", or "eds_properties"
 */
function eds_report_node_list($node_type = null)
{
    if (is_null($node_type)) {
        return array(0);
    }

    if (isset($_REQUEST['nodes']) && !is_null($_REQUEST['nodes'])) {
        $a['nodes_in_report'] = unserialize(urldecode($_REQUEST['nodes']));
    } else {
        $a = $_SESSION;
    }
    if (isset($a['nodes_in_report'][$node_type]) && (!empty($a['nodes_in_report'][$node_type]))) {
        return $a['nodes_in_report'][$node_type];
    } 
    return array();
}

/**
 * Implementation of hook_perm
 */
function eds_report_permission()
{
	return array(
        'access eds report' => array(
            'title' => 'access eds report'
        )
    );
}

function remove_session_variable() 
{
    // HTTP post & session ID & valid variables required
    if (is_null($_REQUEST['sid'])) {
		return false;
	}
	
//	$hostname = db_result(db_query("SELECT hostname FROM {sessions} WHERE sid = '%s'", $_REQUEST['sid']));
    $hostname = db_select('sessions')->fields('sessions', array('hostname'))->condition('sid', $_REQUEST['sid'])->execute()->fetchField();
	if ($_SERVER['REMOTE_ADDR'] != $hostname) {
	    // Checks whether a user with this sid has an appropriate ip address
		return false;
	}
	
	if (!empty($_REQUEST['node_type'])) {
	    $node_type = $_REQUEST['node_type'];
	} else {
	    unset($_SESSION['nodes_in_report']);
	}
	
	foreach ($_REQUEST as $name => $value) {
	    // remove node from session
		if ($name == 'nid_list') {
		    foreach ($value as $nid) {
    			unset($_SESSION['nodes_in_report'][$node_type][$nid]);
		    }
		}
	}
	return true;
}

/**
 * Determines which of the node_types will be removed from report  nodes_in_report. 
 */
function remove_eds_report_session_variable() 
{
    global $tooltips;
    if (empty($_POST) && !empty($_GET)) {
        remove_session_variable();

       	return drupal_goto($_REQUEST['destination']);
    } elseif (!empty($_POST)) {
        if (!remove_session_variable()) {
        	module_invoke_all('exit');
    	    exit;
    	}
	
        if (!empty($_REQUEST['node_type'])) {
    	    $node_type = $_REQUEST['node_type'];
    	} else {
    	    unset($_SESSION['nodes_in_report']);
    	}

        $report_nodetypes = variable_get('eds_report_nodetypes', array());
    
    	$return = array(
    	    'counts' => eds_report_node_count(),
//    	    'tooltip' => sprintf("Add %s - %s", $report_nodetypes[$node_type]['alias'], check_plain($tooltips['add_body'])),
//    	    'tooltip_all' => sprintf("Add All Content - %s", check_plain($tooltips['add_body_all'])),
            'tooltip' => sprintf("Add %s - %s", $report_nodetypes[$node_type]['alias'], $tooltips['add_body']),
            'tooltip_all' => sprintf("Add All Content - %s", $tooltips['add_body_all']),
    	    );
        drupal_add_http_header('Content-type',"application/json");
        print drupal_json_encode($return);

        module_invoke_all('exit');
    	exit;
    }
}

function reset_eds_report_session_variable()
{
    if (empty($_POST) && !empty($_GET)) {
        reset_session_variable();    	
       	return drupal_goto($_REQUEST['destination']);
    } elseif (!empty($_POST)) {
        if (!reset_session_variable()) {
        	module_invoke_all('exit');
    	    exit;
    	}
        drupal_add_http_header('Content-type',"text/html");
        print 0;

    	module_invoke_all('exit');
        exit;
    }
}

function reset_session_variable() 
{
    // HTTP post & session ID & valid variables required
    if (is_null($_REQUEST['sid'])) {
		return false;
	}
	
//	$hostname = db_result(db_query("SELECT hostname FROM {sessions} WHERE sid = '%s'", $_REQUEST['sid']));
    $hostname = db_select('sessions')->fields('sessions', array('hostname'))->condition('sid', $_REQUEST['sid'])->execute()->fetchField();
	if ($_SERVER['REMOTE_ADDR'] != $hostname) {
	    // Checks whether a user with this sid has an appropriate ip address
		return false;
	}
	
    unset($_SESSION['nodes_in_report']);
	return true;
}

/**
 * The main function of eds_report 
 * It determines whether the node_types which are going to be included into report,
 * exist and form  $_SESSION['nodes_in_report'] array.
 */
function set_eds_report_session_variable()
{
    global $tooltips;
    if (empty($_POST) && !empty($_GET)) {
        add_session_variable();    	
       	return drupal_goto($_REQUEST['destination']);
    } elseif (!empty($_POST)) {
    	if (!add_session_variable()) {
        	module_invoke_all('exit');
    	    exit;
    	}

    	if (isset($_REQUEST['node_type'])) {
    	    $node_type = $_REQUEST['node_type'];
    	}
	
        $report_nodetypes = variable_get('eds_report_nodetypes', array());
    
    	$return = array(
    	    'counts' => eds_report_node_count(),
//    	    'tooltip' => sprintf("Remove %s - %s", $report_nodetypes[$node_type]['alias'], check_plain($tooltips['remove_body'])),
//    	    'tooltip_all' => sprintf("Remove All Content - %s", check_plain($tooltips['remove_body_all'])),
            'tooltip' => sprintf("Remove %s - %s", $report_nodetypes[$node_type]['alias'], $tooltips['remove_body']),
            'tooltip_all' => sprintf("Remove All Content - %s", $tooltips['remove_body_all']),
    	    );

        drupal_add_http_header('Content-type',"application/json");
    	print drupal_json_encode($return);
	
    	module_invoke_all('exit');
    	exit;
    }
}

function eds_report_theme($existing, $type, $theme, $path) {
    $themes = array (
        'custom_report' => array(
            'template' => 'templates/custom_report',
            'arguments' => array('data' => NULL),
        ),
        'custom_report_pdf' => array(
            'template' => 'templates/custom_report_pdf',
            'arguments' => array('url' => NULL),
        ),
        'custom_report_block' => array(
            'template' => 'templates/custom_report_block',
            'arguments' => array('vars' => NULL),
        ),
        'eds_report_admin_settings' => array(
            'template' => 'templates/eds_report_admin_settings',
            'arguments' => array('form' => NULL),
            'render element' => 'form'
        ),
        'report_information' => array(
            'template' => 'templates/report_information',
            'arguments' => array('text' => NULL),
        ),
        'report_all_link' => array(
            'template' => 'templates/report_all_link',
            'arguments' => array('text' => NULL, 'class' => '', 'nid_list' => array(), 'node_type' => ''),
        ),
        'report_link' => array(
            'template' => 'templates/report_link',
            'arguments' => array('text' => NULL, 'class' => '', 'nid_list' => array(), 'node_type' => ''),
        ),
    );
    return $themes;
}


