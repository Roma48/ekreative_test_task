<?php
/**
 * eds_export_table is an input filter that export html table as CSV
 * $Id$
 */

/**
 * Implementation of hook_perm();
 */
function eds_export_table_permission()
{
    return array(
        'export table' => array(
            'title' => 'export table',
        ),
    );
}

/**
 * Implementation of hook_menu().
 */
function eds_export_table_menu() 
{
    $items = array();
    
    $items['eds/export_table'] = array(
        'title'              => t('Table Export'), 
        'page callback'           => 'eds_export_table_export',
        //'page arguments' => array(2, 3),
        'access callback' => 'user_access',
        'access arguments' => array('export table'),  
        'type'               => MENU_CALLBACK,
    );

    $items['admin/edsuite/export-table'] = array(
        'title'              => t('Export tables settings'),
        'page callback'           => 'drupal_get_form',
        'page arguments' => array('eds_export_table_admin_settings'),
        'access callback' => 'user_access',
        'access arguments' => array('administer site configuration'),        
        'description'        => t('Change which nodes can be exported.')
    );

	
    return $items;
}

/**
 * Define the settings form.
 * It displays all the existing node types on the page 
 * to select those nodes which the link (add/remove) has to be added to.
 */
function eds_export_table_admin_settings() 
{
    $nodeTypes = node_type_get_types();
    
    //echo '<pre>'; print_r($nodeTypes); exit;
    
    $types = array();
    
    foreach($nodeTypes as $typeName=>$value) {
        if($value->module == 'node')
            $types[$typeName] = $typeName;
    }
    
    $export_table_nodetypes = variable_get('export_table_nodetypes', array('book' => 'book'));

    $form['export_table_nodetypes'] = array(
        '#type'          => 'checkboxes',
        '#title'         => t('Users may export tables from these node types'),
        '#options'       => $types,
        '#default_value' => $export_table_nodetypes,
        '#description'   => t(''),
    );

    $form['submit'] = array(
        '#type'  => 'submit', 
        '#value' => t('Save configuration') 
    );

    return $form;
}

/**
 * Save settings in the variable
 */
function eds_export_table_admin_settings_submit($form_id, $form_values)
{
    variable_set('export_table_nodetypes', $form_values['values']['export_table_nodetypes']);    
    
    drupal_set_message(t('The configuration options have been saved.'));
}


/**
 * Implementation of hook_filter_tips()
 */
function eds_export_table_filter_tips($delta, $format, $long = false) 
{
    return t('Add "Export as CSV" link after an instance of an HTML table.');
}

/**
 *  Menu callback to make the CSV
 */
function eds_export_table_export($nid, $tid)
{
    if (!is_numeric($nid) || !is_numeric($tid)) {
        drupal_not_found();
        return;
    }

    if (user_access('export table')) {
        theme('eds_export_table_csv', array('nid' => $nid, 'tid' => $tid));
    } else {
        drupal_access_denied();
    }
}

function eds_export_table_node_view($node, $view_mode, $langcode)
{
    
    $types_to_eds_export_table = variable_get('export_table_nodetypes', array('book' => 'book'));
    if ($view_mode != 'node_embed' && isset($types_to_eds_export_table[$node->type]) && $types_to_eds_export_table[$node->type] === $node->type && user_access('export table')) {
        if(isset($node->body['und'][0]['value'])) {

            if (strstr($node->body['und'][0]['value'], 'eds/export_table') !== false) {
                /* If the body already has a link to export the table then bail, this is probably a parent with rendered children */
                return(null);
            }

            $text_split = preg_split('/(<table.*?<\/table>)/si', $node->content['body'][0]['#markup'], -1, PREG_SPLIT_DELIM_CAPTURE);
            $tid    = 1;
            $result = '';
            $icon   = base_path() . drupal_get_path('module', 'eds_export_table') .'/support/images/icon-csv.gif';

            foreach ($text_split as $value) {
                $result .= $value;

                if (preg_match('/<table.*?<\/table>/si', $value)) {   

                    $result .= theme('export_table_link', array('path' => base_path() . "eds/export_table/$node->nid/$tid", 'icon' => $icon, 'text' => 'Export table as CSV'));
                    $tid++;                               
                } 
            }

            $node->content['body'][0]['#markup'] = $result;
        }
    }
}


function eds_export_table_theme($existing, $type, $theme, $path) {
    $themes = array (
        'export_table_link' => array(
            'template' => 'templates/export_table_link',
            'arguments' => array('path' => NULL, 'icon' => NULL, 'text' => NULL),
        ),
        'eds_export_table_csv' => array(
            'template' => 'templates/eds_export_table_csv',
            'arguments' => array('nid' => NULL, 'tid' => NULL),
        ),
    );
    return $themes;
}

/**
 * Convert html table into the array
 */
function filter_table($table)
{
    $values = array();

    preg_match_all('/<tr.*?<\/tr>/si', $table, $rows);
    
    foreach ($rows[0] as $row_id => $row) {
        preg_match_all('/<t(h|d).*?<\/t(h|d)>/si', $row, $cells);
        
        $shift = 0;

        foreach ($cells[0] as $cell_id => $value) {
            
            // Get colspan and rowspan
            $colspan = 0;
            $rowspan = 0;
            
            if (preg_match('/colspan=(\"|\'|)(\d+)(\"|\'|)/si', $value, $match)) {
                $colspan = $match[2];
            }
            if (preg_match('/rowspan=(\"|\'|)(\d+)(\"|\'|)/si', $value, $match)) {
                $rowspan = $match[2];
            }
            
            /* Filter value */
            $value = preg_replace('/<.*?>/', '', $value);              // strip html tags
            $value = str_replace(array("\r", "\n"), ' ', $value);      // strip line breaks and commas
            $value = str_replace('"', '""', $value);                   // escape " characters
            $value = html_entity_decode($value);                       // escape &nbsp; entities
            
            while (isset($values[$row_id][$cell_id + $shift])) {
                $shift++;
            }
            
            $values[$row_id][$cell_id + $shift] = '"' . trim($value) . '"';
            
            /* Add empty cells for the span */
            if ($rowspan > 1) {
                for ($i = 1; $i < $rowspan; $i++) {
                    $values[$row_id + $i][$cell_id + $shift] = '';
                }
            }

            if ($colspan > 1) {
                for ($i = 1; $i < $colspan; $i++) {
                    $values[$row_id][$cell_id + $shift + $i] = '';
                }
            }
        }
    }
    
    return $values;
}
