<?php

/**
 * eds_properties.module - Available properties and property searching for the EDsuite module collection 
 * $Id$
 */

require_once('eds_properties.views');
require_once('eds_properties_export.inc.php');
module_load_include('inc', 'location', 'supported/location.us');

/* Defining constants for some of the fields */
define('YES', 1);
define('NO', 0);
define('NA', -1);
define('POSSIBLE', 2);

/* Sensible defaults for the properties variables */
global $eds_property_defaults;
$eds_property_defaults = array(
    'building_types'   => array('Commercial', 'Manufacturing', 'Office'),
    'property_types'   => array('Building', 'Site'),
    'site_types'       => array('Airport', 'Commercial', 'Greenfield', 'Industrial', 'Manufacturing', 'Office'),
    'sqft_suffix'      => 'SF', /* I'd like to use 'Sq. Ft.' */
    'incentive_zones'  => array('Enterprise Zone', 'Reinvestment Zone', 'Foreign Trade Zone', 'Recycling Market Development Zone'),
    'zoning_types'     => array('NONE', 'Commercial', 'Commercial/Agricultural', 'Heavy Commercial', 'Heavy Industrial', 'Industrial', 'Light Industrial', 'Multi-family/Retail', 'Office', 'Office/Warehouse', 'Retail/Office'),
    'page_sizes'       => array(10, 20, 50),
    'filter_fields'    => array('property_type', 'property_for_sale', 'property_for_lease', 'building_type', 'site_type', 'zoning_type', 'sq_footage', 'ceiling_height', 'acreage', 'rail_access'),
    'search_fields'    => array('sq_footage|Sq. Footage', 'building_type|Building Type', 'zoning_type|Zoning Type', 'acreage|Acreage'),
    );


/**
 * Implementation of hook_access()
 */
//function eds_properties_node_access($node, $op, $account)
//{
//    global $user;
//    
//    switch ($op) {
//        case 'create':
//            if (user_access('create property')) return NODE_ACCESS_ALLOW;
//            return NODE_ACCESS_DENY;
//            break;
//
//        case 'delete':
//            if (user_access('delete property')) return NODE_ACCESS_ALLOW;
//            return NODE_ACCESS_DENY;
//            break;
//            
//        case 'list properties':
//            if (user_access('list properties')) return NODE_ACCESS_ALLOW;
//            return NODE_ACCESS_DENY;
//            break;
//        
//        case 'request api key':
//            if (user_access('request api key')) return NODE_ACCESS_ALLOW;
//            return NODE_ACCESS_DENY;
//            break;
//
//        case 'view':
//            if (user_access('view property')) return NODE_ACCESS_ALLOW;
//            return NODE_ACCESS_DENY;
//            break;
//
//        case 'update':
//            if (user_access('edit property')) {
//                return NODE_ACCESS_ALLOW;
//            } else {
//                if (user_access('edit own property') && ($user->uid == $node->uid)) {
//                    return NODE_ACCESS_ALLOW;
//                }
//            }
//            return NODE_ACCESS_DENY;
//            break;
//    }
//    return NODE_ACCESS_DENY;
//}

/**
 * Define the settings form.
 * It displays all the existing node types on the page 
 * to select those nodes which the link (add/remove) has to be added to.
 */
function eds_properties_admin_settings() 
{ 
//    $node = node_load(13);
//    eds_property_export($node); exit;
    
    global $eds_property_defaults;
    $default_property_placeholder = variable_get('eds_properties_placeholder', "");
    $default_building_types       = variable_get('eds_properties_building_types', $eds_property_defaults['building_types']);
    $default_property_types       = variable_get('eds_properties_property_types', $eds_property_defaults['property_types']);
    $default_site_types           = variable_get('eds_properties_site_types', $eds_property_defaults['site_types']);
    $default_sqft_suffix          = variable_get('eds_properties_sqft_suffix', $eds_property_defaults['sqft_suffix']);
    $default_incentive_zones      = variable_get('eds_properties_incentive_zones', $eds_property_defaults['incentive_zones']);
    $default_zoning_types         = variable_get('eds_properties_zoning_types', $eds_property_defaults['zoning_types']);
    $default_page_sizes           = variable_get('eds_properties_page_sizes', $eds_property_defaults['page_sizes']);
    $default_filter_fields        = variable_get('eds_properties_filter_fields', $eds_property_defaults['filter_fields']);
    $default_search_fields        = variable_get('eds_properties_search_fields', $eds_property_defaults['search_fields']);

    $default_location_city        = variable_get('eds_properties_default_location_city', '');
    $default_location_province    = variable_get('eds_properties_default_location_province', '');
    $default_location_county      = variable_get('eds_properties_default_location_county', '');
    $default_location_postal_code = variable_get('eds_properties_default_location_postal_code', '');

    $form['filters'] = array(
        '#title'       => t('Property Search Page Options'),
        '#type'        => 'fieldset',
        '#description'   => t('These are the fields that will be available to choose from in order to filter property search results on the !properties page.', array('!properties' => l(t('Available Properties'), 'eds/properties'))),
        '#collapsible' => TRUE,
        '#collapsed'   => TRUE
    );

    $form['filters']['property_type']      = array('#type' => 'checkbox', '#title' => t('Include Property Types?'),     '#default_value' => in_array('property_type', $default_filter_fields) ? 1 : 0);
    $form['filters']['property_for_sale']  = array('#type' => 'checkbox', '#title' => t('Include Property for Sale?'),  '#default_value' => in_array('property_for_sale', $default_filter_fields) ? 1 : 0);
    $form['filters']['property_for_lease'] = array('#type' => 'checkbox', '#title' => t('Include Property for Lease?'), '#default_value' => in_array('property_for_lease', $default_filter_fields) ? 1 : 0);
    $form['filters']['building_type']      = array('#type' => 'checkbox', '#title' => t('Include Building Types?'),     '#default_value' => in_array('building_type', $default_filter_fields) ? 1 : 0);
    $form['filters']['site_type']          = array('#type' => 'checkbox', '#title' => t('Include Site Types?'),         '#default_value' => in_array('site_type', $default_filter_fields) ? 1 : 0);
    $form['filters']['zoning_type']        = array('#type' => 'checkbox', '#title' => t('Include Zoning Types?'),       '#default_value' => in_array('zoning_type', $default_filter_fields) ? 1 : 0);
    $form['filters']['incentive_zones']    = array('#type' => 'checkbox', '#title' => t('Include Incentive Zones?'),    '#default_value' => in_array('incentive_zones', $default_filter_fields) ? 1 : 0);
    $form['filters']['sq_footage']         = array('#type' => 'checkbox', '#title' => t('Include Square Footage?'),     '#default_value' => in_array('sq_footage', $default_filter_fields) ? 1 : 0);
    $form['filters']['ceiling_height']     = array('#type' => 'checkbox', '#title' => t('Include Ceiling Height?'),     '#default_value' => in_array('ceiling_height', $default_filter_fields) ? 1 : 0);
    $form['filters']['acreage']            = array('#type' => 'checkbox', '#title' => t('Include Acreage?'),            '#default_value' => in_array('acreage', $default_filter_fields) ? 1 : 0);
    $form['filters']['rail_access']        = array('#type' => 'checkbox', '#title' => t('Include Rail Access?'),        '#default_value' => in_array('rail_access', $default_filter_fields) ? 1 : 0);
    $form['filters']['uid']                = array('#type' => 'checkbox', '#title' => t('Include Author Search?'),      '#default_value' => in_array('uid', $default_filter_fields) ? 1 : 0);

    $form['filters']['eds_properties_search_by_author_roles_label'] = array(
        '#type'          => 'textfield',
        '#title'         => t('Author Search Label'),
        '#description'   => t('Rather than call the search field "Author" you can choose the term.  Defaults to') . ' ' . t('Realtor') . '.',
        '#multiple'      => true,
        '#default_value' => variable_get('eds_properties_search_by_author_roles_label', t('Realtor')),
    );

    $form['filters']['eds_properties_search_by_author_roles'] = array(
        '#type'          => 'select',
        '#title'         => t('Limit Authors to the following Role(s)'),
        '#description'   => t('The selection here is used to determine which roles we use to populate the Author search dropdown box.'),
        '#options'       => user_roles(),
        '#multiple'      => true,
        '#default_value' => variable_get('eds_properties_search_by_author_roles', array()),
    );


    $form['filters']['eds_properties_search_fields'] = array(
        '#type'          => 'select',
        '#title'         => t('Sort Results By Options'),
        '#description'   => t('The selection here is used to determine which fields the property search results can be sorted by.'),
        '#options'       => array(
            'acreage|Acreage' => 'Acreage', 
            'building_type|Building Type' => 'Building Type', 
            'ceiling_height|Ceiling Height' => 'Ceiling Height', 
            'property_for_sale|Property for Sale' => 'Property for Sale', 
            'property_for_lease|Property for Lease' => 'Property for Lease', 
            'property_type|Property Type' => 'Property Type', 
            'site_type|Site Type' => 'Site Type', 
            'sq_footage|Sq. Footage' => 'Sq. Footage', 
            'zoning_type|Zoning Type' => 'Zoning Type', 
        ),
        '#multiple'      => true,
        '#default_value' => $default_search_fields,
    );

    $form['filters']['eds_properties_default_search_field'] = array(
        '#type'          => 'select',
        '#title'         => t('Default Sort Field'),
        '#options'       => array(
            'acreage' => 'Acreage', 
            'building_type' => 'Building Type', 
            'ceiling_height' => 'Ceiling Height', 
            'property_for_sale' => 'Property for Sale', 
            'property_for_lease' => 'Property for Lease', 
            'property_type' => 'Property Type', 
            'site_type' => 'Site Type', 
            'sq_footage' => 'Sq. Footage', 
            'zoning_type' => 'Zoning Type', 
        ),
        '#multiple'      => true,
        '#default_value' => variable_get('eds_properties_default_search_field', 'sq_footage'),
    );

    $form['filters']['eds_properties_page_sizes'] = array(
        '#title'         => t('Page Sizes'),
        '#type'          => 'textarea',
        '#description'   => t('The values here will determine the page sizes available on the Available Properties page.'),
        '#default_value' => implode("\n", $default_page_sizes),
    );

    $form['defaults'] = array(
        '#title'       => t('Min/Max Values'),
        '#type'        => 'fieldset',
        '#description'   => t('These are the minimum and maximum values used in our sliders'),
        '#collapsible' => TRUE,
        '#collapsed'   => TRUE
    );

    $form['defaults']['eds_properties_sq_footage_min'] = array(
        '#title'         => t('Minimum Square Footage'),
        '#type'          => 'textfield',
        '#size'          => 10,
        '#default_value' => variable_get('eds_properties_sq_footage_min', 2000),
    );

    $form['defaults']['eds_properties_sq_footage_max'] = array(
        '#title'         => t('Maximum Square Footage'),
        '#type'          => 'textfield',
        '#size'          => 10,
        '#default_value' => variable_get('eds_properties_sq_footage_max', 200000),
    );

    $form['defaults']['eds_properties_ceiling_height_min'] = array(
        '#title'         => t('Minimum Ceiling Height'),
        '#type'          => 'textfield',
        '#size'          => 10,
        '#default_value' => variable_get('eds_properties_ceiling_height_min', 16),
    );

    $form['defaults']['eds_properties_ceiling_height_max'] = array(
        '#title'         => t('Maximum Ceiling Height'),
        '#type'          => 'textfield',
        '#size'          => 10,
        '#default_value' => variable_get('eds_properties_ceiling_height_max', 50),
    );

    $form['defaults']['eds_properties_acreage_min'] = array(
        '#title'         => t('Minimum Acreage'),
        '#type'          => 'textfield',
        '#size'          => 10,
        '#default_value' => variable_get('eds_properties_acreage_min', 1),
    );

    $form['defaults']['eds_properties_acreage_max'] = array(
        '#title'         => t('Maximum Acreage'),
        '#type'          => 'textfield',
        '#size'          => 10,
        '#default_value' => variable_get('eds_properties_acreage_max', 500),
    );

    $form['options'] = array(
        '#title'       => t('Options'),
        '#type'        => 'fieldset',
        '#collapsible' => TRUE,
        '#collapsed'   => TRUE
    );

    $form['options']['eds_properties_building_types'] = array(
        '#title'         => t('Building Types'),
        '#type'          => 'textarea',
        '#description'   => t('The possible values for Building Types. Enter one value per line, in the format key|label. The key is the value that will be stored in the database and it must match the field storage type, text. The label is optional and the key will be used as the label if no label is specified.'),
        '#default_value' => implode("\n", $default_building_types),
    );

    $form['options']['eds_properties_site_types'] = array(
        '#title'         => t('Site Types'),
        '#type'          => 'textarea',
        '#description'   => t('The possible values for Site Types. Enter one value per line, in the format key|label. The key is the value that will be stored in the database and it must match the field storage type, text. The label is optional and the key will be used as the label if no label is specified.'),
        '#default_value' => implode("\n", $default_site_types),
        '#rows'          => '7',
    );

    $form['options']['eds_properties_zoning_types'] = array(
        '#title'         => t('Zoning Types'),
        '#type'          => 'textarea',
        '#description'   => t('The possible values for Zoning Types. Enter one value per line, in the format key|label. The key is the value that will be stored in the database and it must match the field storage type, text. The label is optional and the key will be used as the label if no label is specified.'),
        '#default_value' => implode("\n", $default_zoning_types),
        '#rows'          => '12',
    );

    $form['options']['eds_properties_incentive_zones'] = array(
        '#title'         => t('Incentive Zones'),
        '#type'          => 'textarea',
        '#description'   => t('The possible values for Incentive Zones. Enter one value per line, in the format key|label. The key is the value that will be stored in the database and it must match the field storage type, text. The label is optional and the key will be used as the label if no label is specified.'),
        '#default_value' => implode("\n", $default_incentive_zones),
        '#rows'          => '12',
    );

    $form['eds_properties_sqft_suffix'] = array(
        '#type'          => 'textfield',
        '#title'         => t('Square Foot Suffix'),
        '#description'   => t('This is the suffix that will be used for all Square Foot data types.'),
        '#default_value' => $default_sqft_suffix,
    );
    
    $form['location_defaults'] = array(
        '#type'        => 'fieldset',
        '#title'       => 'Location Defaults',
        '#collapsible' => TRUE,
        '#collapsed'   => FALSE,
        '#description' => t('These options exist to pre-fill the location data on new property nodes only.')
    );

    $form['location_defaults']['eds_properties_default_location_city'] = array(
        '#type'          => 'textfield',
        '#title'         => t('City'),
        '#description'   => t('This is the city that will be entered on the "Add Property" page.'),
        '#default_value' => $default_location_city,
    );

    $form['location_defaults']['eds_properties_default_location_province'] = array(
        '#type'          => 'select',
        '#title'         => t('State'),
        '#description'   => t('This is the state that will be selected on the "Add Property" page.'),
        '#options'       => location_province_list_us(),
        '#default_value' => $default_location_province,
    );

    $form['location_defaults']['eds_properties_default_location_county'] = array(
        '#type'          => 'textfield',
        '#title'         => t('County'),
        '#description'   => t('This is the county that will be selected on the "Add Property" page.'),
        '#default_value' => $default_location_county,
    );

    $form['location_defaults']['eds_properties_default_location_postal_code'] = array(
        '#type'          => 'textfield',
        '#title'         => t('Zip Code'),
        '#description'   => t('This is the zip code that will be entered on the "Add Property" page.'),
        '#default_value' => $default_location_postal_code,
    );

    $form['eds_default_property_placeholder'] = array(
        '#type'          => 'textfield',
        '#title'         => t('Path to Placeholder Image for Properties'),
        '#description'   => t('This file will be used as the image for a property when that property has no images associated with it.'),
        '#default_value' => $default_property_placeholder,
        '#size'          => 60,
        '#maxlength'     => 256
    );

    $form['eds_default_property_placeholder_file'] = array(
        '#type'          => 'file',
        '#title'         => t('Upload Placeholder Image for Properties'),
        '#description'   => t('Upload an image file if you do not have one or know the path to one.  The recommended resolution is 500x300.'),
    );
    
    $form['eds_properties_block_count'] = array(
        '#title'         => t('Property Search Blocks'),
        '#type'          => 'textfield',
        '#size'          => 4,
        '#description'   => t('This is the number of Property Search Blocks that will be available to the CMS.'),
        '#default_value' => variable_get('eds_properties_block_count', 1),
    );
    
    $form['eds_properties_question_emails'] = array(
        '#title'         => t('Emails for sending questions about properties'),
        '#type'          => 'textarea',
        '#size'          => 4,
        '#description'   => t('Please use comma as delimiter. Example: test1@test.com,test2@test.com,etc.'),
        '#default_value' => variable_get('eds_properties_question_emails', ''),
    );    

    $form['submit'] = array(
        '#type'  => 'submit', 
        '#value' => t('Save configuration') 
    );
    $form['#attributes'] = array('enctype' => 'multipart/form-data');

    return $form;
}

/**
 * Save settings in the variable
 */
function eds_properties_admin_settings_submit($form_id, $form_values)
{
    $config = array();
    foreach (array('property_type', 'property_for_sale', 'property_for_lease', 'building_type', 'site_type', 'zoning_type', 'sq_footage', 'ceiling_height', 'acreage', 'rail_access', 'uid') as $field) {
        if ($form_values['values'][$field] == 1) {
            $config[] = $field;
        }
    }
    variable_set('eds_properties_question_emails', $form_values['values']['eds_properties_question_emails']);
    variable_set('eds_properties_filter_fields', $config);
    
    foreach (array('eds_properties_building_types',
                   'eds_properties_site_types',
                   'eds_properties_incentive_zones',
                   'eds_properties_zoning_types',
                   'eds_properties_page_sizes',
                   ) as $key) {
        variable_set($key, preg_split("/\r?\n/", $form_values['values'][$key]));
    }

    foreach (array('eds_properties_default_location_city',
                   'eds_properties_default_location_province',
                   'eds_properties_default_location_county',
                   'eds_properties_default_location_postal_code',
                   'eds_properties_sq_footage_min',
                   'eds_properties_sq_footage_max',
                   'eds_properties_ceiling_height_min',
                   'eds_properties_ceiling_height_max',
                   'eds_properties_acreage_min',
                   'eds_properties_acreage_max',
                   'eds_properties_search_fields',
                   'eds_properties_default_search_field',
                   'eds_properties_sqft_suffix',
                   'eds_properties_block_count',
                   'eds_properties_search_by_author_roles_label',
                   'eds_properties_search_by_author_roles',
                   ) as $key) {
        variable_set($key, $form_values['values'][$key]);
    }

      $file = file_save_upload('eds_default_property_placeholder_file', array(
          'file_validate_is_image' => array(),
          'file_validate_extensions' => array('png gif jpg jpeg'),
      ));
      
      if ($file) {
        $file->status = FILE_STATUS_PERMANENT;
        file_save($file);
        if ($file = file_move($file, 'public://')) { 
            
          variable_set('eds_properties_placeholder', file_create_url($file->uri));
          $form_state['values']['file'] = $file;
        }
        else {
            form_set_error('eds_default_property_placeholder_file', t('There was an error in uploading your file.  Please try again.'));
        }
      }
      else {
      }
    

    drupal_set_message(t('The configuration options have been saved.'));
}


/**
* Implements hook_block_info().
*/
function eds_properties_block_info() {
    $blocks = array();
    
    //question block
    $blocks['property_question_form_block'] = array(
        'info'    => t('Have a Question about this Property?'),
        'weight'  => 0,
        'enabled' => 0,
    );
    
    
    $block_count = variable_get('eds_properties_block_count', 1);
    if ($block_count < 1) {
        return null;
    }    
    
    for ($i = 0; $i < $block_count; $i++) {
        $blocks['property_search_block_'. $i] = array(
            'info'    => t('Property Search Block') . ' #' . ($i + 1),
            'weight'  => 0, 
            'enabled' => 0,
        );
    }    
 
    return $blocks;
}

function eds_properties_block_configure($delta = '')
{
    
    $form = array();
    
    $defaults = variable_get('eds_properties_block_' . $delta . '_config', array('property_type', 'building_type', 'site_type', 'sq_footage', 'acreage', 'actual_price'));

    $form['property_type']      = array('#type' => 'checkbox', '#title' => t('Include Property Types?'),     '#default_value' => in_array('property_type', $defaults) ? 1 : 0);
    $form['property_for_sale']  = array('#type' => 'checkbox', '#title' => t('Include Property for Sale?'),  '#default_value' => in_array('property_for_sale', $defaults) ? 1 : 0);
    $form['property_for_lease'] = array('#type' => 'checkbox', '#title' => t('Include Property for Lease?'), '#default_value' => in_array('property_for_lease', $defaults) ? 1 : 0);
    $form['building_type']      = array('#type' => 'checkbox', '#title' => t('Include Building Types?'),     '#default_value' => in_array('building_type', $defaults) ? 1 : 0);
    $form['site_type']          = array('#type' => 'checkbox', '#title' => t('Include Site Types?'),         '#default_value' => in_array('site_type', $defaults) ? 1 : 0);
    $form['zoning_type']        = array('#type' => 'checkbox', '#title' => t('Include Zoning Types?'),       '#default_value' => in_array('zoning_type', $defaults) ? 1 : 0);
    $form['sq_footage']         = array('#type' => 'checkbox', '#title' => t('Include Square Footage?'),     '#default_value' => in_array('sq_footage', $defaults) ? 1 : 0);
    $form['ceiling_height']     = array('#type' => 'checkbox', '#title' => t('Include Ceiling Height?'),     '#default_value' => in_array('ceiling_height', $defaults) ? 1 : 0);
    $form['acreage']            = array('#type' => 'checkbox', '#title' => t('Include Acreage?'),            '#default_value' => in_array('acreage', $defaults) ? 1 : 0);
    $form['rail_access']        = array('#type' => 'checkbox', '#title' => t('Include Rail Access?'),        '#default_value' => in_array('rail_access', $defaults) ? 1 : 0);
    $form['uid']                = array('#type' => 'checkbox', '#title' => t('Include !author Search?', array('!author' => variable_get('eds_properties_search_by_author_roles_label', t('Realtor')))),     '#default_value' => in_array('uid', $defaults) ? 1 : 0);

    return $form;
}

function eds_properties_block_save($delta = '', $edit = array())
{
    foreach (array('property_type', 'property_for_sale', 'property_for_lease', 'building_type', 'site_type', 'zoning_type', 'sq_footage', 'ceiling_height', 'acreage', 'rail_access', 'uid') as $field) {
        if ($edit[$field] == 1) {
            $config[] = $field;
        }
    }
    variable_set('eds_properties_block_' . $delta . '_config', $config); 
}

/**
* Implements hook_block_view().
*
*/
function eds_properties_block_view($delta = '') {

    if($delta == 'property_question_form_block') {
       
        $block = array('subject' => t('Have a Question about this Property?'), 'content' => drupal_get_form('eds_properties_question_block_form'));
        
    } else {
    
        static $added_settings;

        drupal_add_js(drupal_get_path('module', 'eds_properties') . '/js/property_block.js', 'file');
        if ($added_settings != true) {
            drupal_add_js(array('edsuite' => array('properties' => array('count_url' => url('eds/properties/count')))), 'setting');
            $added_settings = true;
        }
        $block = array(
            'subject' => t('Property Search'),
            'content' => drupal_get_form('eds_properties_search_form_block_' . $delta),
        );
    
    }
    
    return $block;
}

function eds_properties_question_block_form()
{
    $form['name'] = array(
        '#title' => 'Your Name:',
        '#type' => 'textfield',
        '#default_value' => '',
        '#maxlength' => 32,
        '#size' => 40,
        '#id' => 'question-name',
        '#required' => true
    );    
    
    $form['email'] = array(
        '#title' => t('Your Email:'),
        '#type' => 'textfield',
        '#default_value' => '',
        '#size' => 40,
        '#id' => 'question-email',
        '#required' => true
    );
    
    $form['question'] = array(
        '#title' => t('Question:'),
        '#type' => 'textarea',
        '#default_value' => '',
        '#size' => 40,
        '#id' => 'question-text',
        '#required' => true
    ); 
    
    $form['question'] = array(
        '#title' => t('Question:'),
        '#type' => 'textarea',
        '#default_value' => '',
        '#size' => 40,
        '#id' => 'question-text',
        '#required' => true
    );  
    
    $form['captcha'] = array(
      '#type' => 'captcha',
      '#captcha_type' => 'image_captcha/Image',
    );    
    
    $form['button'] = array(
        '#type' => 'submit',
        '#value' => t('Submit'),
    );
    
    // $form['#action'] = url('proposal/code');
    //$form['#attributes'] = array('target' => '_blank');
    
    return $form;
}

function question_form_submit()
{        
    //send email to avtor
    $nid = $_POST['nid'];
    $uid = $_POST['uid'];
    $title = $_POST['title'];
    $email = $_POST['email'];
    $name = $_POST['name'];
    $question = $_POST['text'];
    
    $csid = $_POST['captchaSid'];
    $captchaToken = $_POST['captchaToken'];
    $captchaText = $_POST['captchaText'];
    
    
    $solution = db_query(
    'SELECT solution FROM {captcha_sessions} WHERE csid = :csid',
    array(':csid' => $csid)
    )
    ->fetchField();
    
    if($solution != $captchaText) {
        echo json_encode(array("status" => false, "message" => "Wrong captcha text.")); die;    
    }  
    
    $user = user_load($uid);

    $emails = explode(",", variable_get('eds_properties_question_emails'));

    $emails[] = $user->mail;    
    
    $subject = 'Question about propery "'. $title .'".';

    $body = 'Name: '. $name .' <br />'.
            'Email: ' . $email .' <br /><br />'.
            'Property title: '. $title .' <br />'.
            'Question: '. $question .' <br />';

    
   foreach($emails as $emailTo) { 
        $emailData = drupal_mail('eds_properties', 'question_email', $emailTo, language_default(), array('subject' => $subject, 'body' => $body), $email);
   }
   
   if($emailData['result']) {
        echo json_encode(array("status" => true, "message" => "Email has been sent!")); die;
   } else {
        echo json_encode(array("status" => false, "message" => "Email hasn't sent, please try again.")); die;
   }
    
}


/**
 * Takes an associative array of form values and creates a query, a list of WHERE clauses, and any associated arguements
 *   ex:  list($query, $args, $where, $sort) = eds_properties_compose_query(array('property_for_sale' => true));
 */
function eds_properties_compose_query($values)
{
    //echo '<pre>'; print_r($values); exit;
    
    $where = array();
    $args = array();
    $sort = "";
    $query = "SELECT n.nid FROM {node} n
    LEFT JOIN {field_data_field_property_type} property_type on property_type.entity_id = n.nid
    LEFT JOIN {field_data_field_property_for_sale} property_for_sale on property_for_sale.entity_id = n.nid
    LEFT JOIN {field_data_field_property_for_lease} property_for_lease on property_for_lease.entity_id = n.nid
    LEFT JOIN {field_data_field_building_type} building_type on building_type.entity_id = n.nid
    LEFT JOIN {field_data_field_site_type} site_type on site_type.entity_id = n.nid
    LEFT JOIN {field_data_field_zoning_type} zoning_type on zoning_type.entity_id = n.nid
    LEFT JOIN {field_data_field_sq_footage} sq_footage on sq_footage.entity_id = n.nid
    LEFT JOIN {field_data_field_ceiling_height} ceiling_height on ceiling_height.entity_id = n.nid
    LEFT JOIN {field_data_field_acreage} acreage on acreage.entity_id = n.nid
    LEFT JOIN {field_data_field_rail_access} rail_access on rail_access.entity_id = n.nid
    WHERE n.type = 'eds_properties' AND n.status = 1 AND ";


    if (isset($values['sort_by'])) {
        $sort = " ORDER BY " . $values['sort_by'] . ".field_".$values['sort_by']. '_value ' . $values['sort_type'];
    }

    if ($values['property_type']) {
        $where[] = "property_type.field_property_type_value = :property_type";
        $args[':property_type'] = $values['property_type'];
    }
    
    if ($values['property_for_sale'] xor $values['property_for_lease']) {
        if ($values['property_for_sale']) {
            $where[] = "property_for_sale.field_property_for_sale_value = 1";
        }

        if ($values['property_for_lease']) {
            $where[] = "property_for_lease.field_property_for_lease_value = 1";
        }
    }

    if ($values['building_type']) {
        $where[] = "building_type.field_building_type_value = :building_type";
        $args[':building_type'] = $values['building_type'];
    }

    if ($values['site_type']) {
        $where[] = "site_type.field_site_type_value = :site_type";
        $args[':site_type'] = $values['site_type'];
    }

    if ($values['zoning_type']) {
        $where[] = "zoning_type.field_zoning_type_value = :zoning_type";
        $args[':zoning_type'] = $values['zoning_type'];
    }

    if ($values['sq_footage-min']) {
        if ($values['sq_footage-min'] != variable_get('eds_properties_sq_footage_min', 2000)) {
            $where[] = "sq_footage.field_sq_footage_value >= :sq_footage_min";
            $args[':sq_footage_min'] = $values['sq_footage-min'];
        }
    }

    if ($values['sq_footage-max']) {
        if ($values['sq_footage-max'] != variable_get('eds_properties_sq_footage_max', 200000)) {
            $where[] = "sq_footage.field_sq_footage_value <= :sq_footage_max";
            $args[':sq_footage_max'] = $values['sq_footage-max'];
        }
    }

    if ($values['ceiling_height-min']) {
        if ($values['ceiling_height-min'] != variable_get('eds_properties_ceiling_height_min', 16)) {
            $where[] = "ceiling_height.field_ceiling_height_value >= :ceiling_height_min";
            $args[':ceiling_height_min'] = $values['ceiling_height-min'];
        }
    }

    if ($values['ceiling_height-max']) {
        if ($values['ceiling_height-max'] != variable_get('eds_properties_ceiling_height_max', 50)) {
            $where[] = "ceiling_height.field_ceiling_height_value <= :ceiling_height_max";
            $args[':ceiling_height_max'] = $values['ceiling_height-max'];
        }
    }

    if ($values['acreage-min']) {
        if ($values['acreage-min'] != variable_get('eds_properties_acreage_min', 1)) {
            $where[] = "acreage.field_acreage_value >= :acreage_min";
            $args[':acreage_min'] = $values['acreage-min'];
        }
    }

    if ($values['acreage-max']) {
        if ($values['acreage-max'] != variable_get('eds_properties_acreage_max', 500)) {
            $where[] = "acreage.field_acreage_value <= :acreage_max";
            $args[':acreage_max'] = $values['acreage-max'];
        }
    }

    if (!empty($values['rail_access'])) {
        $i = 0;
        foreach ($values['rail_access'] as $rail_opt) {
            $in_where[] = 'rail_access.field_rail_access_value = :rail_access_'.$i;
            $args[':rail_access_'.$i] = $rail_opt;
            $i++;
        }
        $where[] = "(" . implode(' OR ', $in_where) . ")";
        
        //echo '<pre>'; print_r($where); exit;
    }

    if ($values['uid']) {
        $where[] = "n.uid = :uid";
        $args[':uid'] = $values['uid'];
    }

    $query .= implode(" AND ", $where) . $sort;
    

    return array($query, $args, $where, $sort);
}


/**
 * Ensures / Creates the directory structure to hold the photos for the properties
 */
function eds_properties_get_photo_dir($nid = null)
{
    $directory_path = file_directory_path();
    if ($nid) {
        /* Drupal cannot do `mkdir -p <dir>` so we need to specify each subdirectory */
        $directory_path .= '/edsuite';
        file_check_directory($directory_path, FILE_CREATE_DIRECTORY, 'add_photo');
        $directory_path .= '/eds_properties';
        file_check_directory($directory_path, FILE_CREATE_DIRECTORY, 'add_photo');
        $directory_path .= '/' . $nid;
        file_check_directory($directory_path, FILE_CREATE_DIRECTORY, 'add_photo');
        $directory_path .= '/photos';
        file_check_directory($directory_path, FILE_CREATE_DIRECTORY, 'add_photo');
    }
    return $directory_path;
}

/**
 * Return a result count.
 */
function eds_properties_count()
{
    if (!array_key_exists('property_search', $_REQUEST)) {
        module_invoke_all('exit');
        exit; 
    }
    
    list($query, $args, $where) = eds_properties_compose_query($_REQUEST['property_search']);
    
    $items = db_query($query, $args)->fetchAllAssoc('nid');
    
    $total_items = ($items !== false) ? count($items) : 0;


    $results = t("results matching your query");
    if ($total_items == 1) {
        $results = t("result matching your query");
    }
    
    $output = '<span id="count">'. $total_items. '</span> '. $results;
    $output_script = '';
    
    if ($total_items > 0) {
        $output_script .= 'jQuery("' .$_REQUEST['form_id'] .' input[type=\'submit\']").val("' . t('Show Results') . '");';
        $output_script .= 'jQuery("' .$_REQUEST['form_id'] .' input[type=\'submit\']").addClass("show-results");';
    } else {
        $output_script .= 'jQuery("' .$_REQUEST['form_id'] .' input[type=\'submit\']").val("' . t('Search') . '");';
        $output_script .= 'jQuery("' .$_REQUEST['form_id'] .' input[type=\'submit\']").removeClass("show-results");';
    }
    
    /* Return html data and scipt for execution */
    drupal_add_http_header('Content-Type', 'text/javascript');
    print drupal_json_encode(array(
        'data'   => $output,
        'script' => $output_script,
    ));
    
    module_invoke_all('exit');
    exit; 
}

/**
 * Implementation of hook_cron()
 * This will delete properties from the system that have been marked as deleted and have been seen by all active exporters
 */
function eds_properties_cron()
{

    $result = db_query("SELECT n.nid FROM {node} n
                        LEFT JOIN {field_data_field_verified} v on v.entity_id = n.nid
                        WHERE n.type = :nodeType AND 
                              n.nid = 70 AND
                              v.field_verified_value != :verified AND
                              n.status = :status", 
            array(':nodeType' => 'eds_properties', ':status' => 1, ':verified' => 1));
    
// test dates    
//    $date6Month = strtotime( "+6 month", time() );
//    $date9Month = strtotime( "+6 month +2 week", time() );
//    $date9Month1day = strtotime( "+6 month +2 week +1 day", time() );
//    
//    var_dump(date("Y-m-d H:i:s", time()), date("Y-m-d H:i:s", $date6Month), date("Y-m-d H:i:s", $date9Month), date("Y-m-d H:i:s", $date9Month1day)); exit;
//  
//    $date6Month = strtotime( "+1 minute", time() );
//    $date9Month = strtotime( "+2 minute", time() );
//    $date9Month1day = strtotime( "+3 minute", time() );
//    
//    var_dump(date("Y-m-d H:i:s", time()), date("Y-m-d H:i:s", $date6Month), date("Y-m-d H:i:s", $date9Month), date("Y-m-d H:i:s", $date9Month1day)); exit;
      
    
    while ($obj = $result->fetchObject()) {
        $node = node_load($obj->nid);
        
        $verified = $node->field_verified['und'][0]['value'];
        
        $dateChanged = $node->changed;
        $dateNow = time();
        $nodeAuthor = user_load($node->uid);        
        //send email to avtor
        $emails = explode(",", $node->field_emails_for_cron['und'][0]['value']);
        $emails[] = $nodeAuthor->mail;
        
        switch($verified) {
        
            case '0': 
                $date6Month = strtotime( "+6 month", $dateChanged );
                //$date6Month = strtotime( "+1 minute", $dateChanged );

                if($date6Month >= $dateNow ) {

                    $subject = 'EDsuite Available Property Verification First Notice';

                    $body = 'According your EDsuite Available Property database, it has been 6 months since '. $node->title .' has been updated.  Please click the following link to “verify” that this property is still available and that no additional changes need to be made to the listing.  If this property is no longer available please click the following link to move the property to an unpublished state, effectively removing it from your available property page.  You can also login to your account and verify or unpublish this property listing without using the links above.  If no action is taken an additional notification will be sent in three weeks for review.  If at that point no verification is received, then the property listing will automatically be unpublished from the database.  At no point will the EDsuite Available Property Tool delete any property listing from your database.  If a property listing has been unpublished, simply login to your account find the property listing, then select “publish” and the property listing will again be visible in the database. <br />'.
                            '<a href="'. url('node/'. $node->nid) .'">'. $node->title .'</a> <br /><br />'.
                            '<a href="'. $GLOBALS['base_url'] .'/eds/property/'. $node->nid .'/verified">Verify link</a> <br />' .
                            '<a href="'. $GLOBALS['base_url'] .'/eds/property/'. $node->nid .'/unpublish">Unpublish link</a> <br />';
                    
                    foreach($emails as $email) {
                        drupal_mail('eds_properties', 'cron_email', $email, language_default(), array('subject' => $subject, 'body' => $body), 'info@test.com');
                    }                     
                }
                
                $node->field_verified['und'][0]['value'] = 6;
                node_save($node);
                
                echo '1';
                break;
            case '6':
                $date9Month = strtotime( "+2 week", $dateChanged );
                //$date9Month = strtotime( "+2 minute", $dateChanged );
                
                if($date9Month >= $dateNow ) {

                    $subject = 'EDsuite Available Property Verification Second Notice';

                    $body = 'According to your EDsuite Available Property database, the property listing '. $node->title .' has not been modified or verified in over 6 months.  Please click the link below to verify that this property listing is still active and available or click the link to unpublish the listing.  Without verification the property listing will automatically be unpublished from the database.  At no point will the EDsuite Available Property Tool delete any property listing from your database.  If a property listing has been unpublished, simply login to your account find the property listing, then select “publish” and the property listing will again be visible in the database. <br />'.
                            '<a href="'. url('node/'. $node->nid) .'">'. $node->title .'</a> <br /><br />'.
                            '<a href="'. $GLOBALS['base_url'] .'/eds/property/'. $node->nid .'/verified">Verify link</a> <br />' .
                            '<a href="'. $GLOBALS['base_url'] .'/eds/property/'. $node->nid .'/unpublish">Unpublish link</a> <br />';
                    
                    foreach($emails as $email) {
                        drupal_mail('eds_properties', 'cron_email', $email, language_default(), array('subject' => $subject, 'body' => $body), 'info@test.com');
                    } 
                } 
                
                $node->field_verified['und'][0]['value'] = 9;
                node_save($node);
                echo '2';
                break;
            case '9':
                $date9Month1day = strtotime( "+1 day", $dateChanged );
                //$date9Month1day = strtotime( "+3 minute", $dateChanged );
                
                if($date9Month1day >= $dateNow ) {
                    $node->status = 0;
                    node_save($node);
                } 
                echo '3';
                break;
        
        }
               
       
    }

}

/*
 * Implements hook_mail().
 */
function eds_properties_mail($key, &$message, $params) {
    switch($key) {
        case 'cron_email':
            $message['subject'] = $params['subject'];
            $message['body'][] = $params['body'];
            
            break;
        case 'question_email':
            $message['subject'] = $params['subject'];
            $message['body'][] = $params['body'];
            
            break;
    }
}

/**
 * Implementation of hook_delete()
 */
function eds_properties_delete($node)
{
    node_delete($node->nid);
}

/**
 * Implementation of hook_form_alter()
 */
function eds_properties_form_alter(&$form, &$form_state, $form_id)
{
    if ($form_id == 'eds_properties_node_form') {
        //drupal_add_js(drupal_get_path('module', 'eds_properties') . '/js/property_add_form.js', 'file');
        drupal_add_css(drupal_get_path('module', 'eds_properties') . '/support/css/property_add_form.css', 'file');
    }
}

/**
 * Implementation of hook_forms()
 */
function eds_properties_forms()
{
    global $eds_property_defaults;
    
    $defaults = array(
        'property_type' => 'Building',
        'property_for_sale' => 1,
        'property_for_lease' => 1,
        'building_type' => '',
        'site_type' => '',
        'zoning_type' => '',
        'sq_footage-min' => variable_get('eds_properties_sq_footage_min', 2000),
        'sq_footage-max' => variable_get('eds_properties_sq_footage_max', 200000),
        'ceiling_height-min' => variable_get('eds_properties_ceiling_height_min', 16),
        'ceiling_height-max' => variable_get('eds_properties_ceiling_height_max', 50),
        'acreage-min' => variable_get('eds_properties_acreage_min', 1),
        'acreage-max' => variable_get('eds_properties_acreage_max', 500),
        'actual_price-min' => variable_get('eds_properties_actual_price_min', 10000),
        'actual_price-max' => variable_get('eds_properties_actual_price_max', 1000000),
        'rail_access' => array('1' => 1, '0' => 0, '2' => 2),
        'sort_by' => variable_get('eds_properties_default_search_field', 'sq_footage'),
        'sort_type' => 'ASC',
        'uid' => '',
        );
    
    if (isset($_SESSION) && array_key_exists('property_search', $_SESSION)) {
        foreach ($defaults as $key => $value) {
            if (array_key_exists($key, $_SESSION['property_search'])) {
                $eds_properties_search_form_defaults[$key] = $_SESSION['property_search'][$key];
            } else {
                $eds_properties_search_form_defaults[$key] = $value;
            }
        }
    } else {
        $eds_properties_search_form_defaults = $defaults;
    }
    
    $forms['eds_properties_search_form'] = array(
        'callback' => 'eds_properties_search_form_builder',
        'callback arguments' => array('eds/properties/search', variable_get('eds_properties_filter_fields', $eds_property_defaults['filter_fields']), $eds_properties_search_form_defaults),
        );
    
    $block_count = variable_get('eds_properties_block_count', 1);
    for ($i = 0; $i < $block_count; $i++) {
        $forms['eds_properties_search_form_block_property_search_block_' . $i] = array(
            'callback' => 'eds_properties_search_form_builder',
            'callback arguments' => array('eds/properties', variable_get('eds_properties_block_property_search_block_' . $i . '_config', array('property_type', 'building_type', 'site_type', 'sq_footage', 'acreage', 'actual_price')), $defaults, 'property_search_block_'. $i),
            );
    }
    
    return $forms;
}

/**
 * Implementation of hook_menu().
 */
function eds_properties_menu() 
{
    $items = array();
        
    $items['eds/properties/count'] = array(
        'page callback'           => 'eds_properties_count', 
        'page arguments' =>     array('properties'),
        'access callback' => 'user_access',
        'access arguments' => array('view property'),
        'type'               => MENU_CALLBACK
    );   

    $items['eds/properties/autocomplete'] = array(
        'title'              => t('Property autocomplete'),
        'callback'           => 'eds_properties_autocomplete',
        'access callback'    => true,
        'type'               => MENU_CALLBACK
    );
    
//    $items['admin/edsuite/properties-export'] = array(
//        'title'              => t('Property Export API Keys'),
//        'page callback'           => 'drupal_get_form',
//        'page arguments' => array('eds_properties_export_api_keys_admin'),
//        'access callback' => 'user_access',
//        'access arguments' => array('administer site configuration'),            
//        'description'        => t('Administer the property export API keys.')
//    );
           
    
    $items['admin/edsuite/properties'] = array(
        'title'              => t('Properties settings'),
        'page callback'           => 'drupal_get_form',
        'page arguments' => array('eds_properties_admin_settings'),
        'access callback' => 'user_access',
        'access arguments' => array('administer site configuration'),
        'description'        => t('Configure the property tool.')
    );  

    $items['admin/content/properties'] = array(
        'title'              => t('Properties'),
        'page callback'           => 'eds_properties_content_view',            
        'access callback' => 'user_access',
        'access arguments' => array('list properties'),
        'description'        => t('An alternate view of the EDSuite Properties content.')
    );

    $items['eds/properties'] = array(
        'title'              => t('Available Properties'),
        'page callback'           => 'eds_properties_view_properties', 
        'access callback' => 'user_access',
        'access arguments' => array('view property'),
        'type'               => MENU_CALLBACK
    );
    $items['eds/properties/embed'] = array(
        'path'               => 'eds/properties/embed',
        'page callback'           => 'eds_properties_view_properties_embed', 
        'access callback' => 'user_access',
        'access arguments' => array('view property'),
        'type'               => MENU_CALLBACK
    );
    $items['eds/property'] = array(
        'title'              => t('Available Properties'),
        'page callback'           => 'eds_properties_view_properties', 
        'access callback' => 'user_access',
        'access arguments' => array('view property'),
        'type'               => MENU_CALLBACK
    );
    $items['eds/properties/search'] = array(
        'page callback'           => 'eds_properties_property_search', 
        'access callback' => 'user_access',
        'access arguments' => array('view property'),
        'type'               => MENU_CALLBACK
    );

//    $items['eds/properties/export'] = array(
//        'page callback'           => 'eds_properties_export', 
//        'access callback' => 'user_access',
//        'access arguments' => array('view property'),
//        'type'               => MENU_CALLBACK
//    );
//    $items['eds/properties/export/request'] = array(
//        'page callback'           => 'eds_properties_export_request_api_key', 
//        'access callback' => 'user_access',
//        'access arguments' => array('request api key'),
//        'type'               => MENU_CALLBACK
//    );  
     
    $items['eds/property/%'] = array(
        'title'              => t('Available Property'),
        'access callback' => 'user_access',
        'access arguments' => array('view property'), 
        'page callback'           => 'eds_properties_check_parameters',
        'page arguments' => array(null, 2, null),
        'type'               => MENU_CALLBACK
    );
    $items['eds/property/%/view'] = array(
        'title'              => t('View'),
        'access callback' => 'user_access',
        'access arguments' => array('view property'),                 
        'page callback'           => 'eds_properties_check_parameters',
        'page arguments' => array(null, 2, 3),
        'type'               => MENU_DEFAULT_LOCAL_TASK,
        'weght'              => -10,
    );
    $items['eds/property/%/edit'] = array(
        'title'              => t('Edit'),
        'page callback'           => 'eds_properties_check_parameters',
        'page arguments' => array(null, 2, 3),
        'weight'             => 1,
        'type'               => MENU_LOCAL_TASK
    );
    $items['eds/property/%/delete'] = array(
        'title'              => t('Delete'),
        'page callback'           => 'drupal_get_form',
        'page arguments' => array('node_delete_confirm'),
        'weight'             => 1,
        'type'               => MENU_CALLBACK
    );
          
    $items['user/%/properties'] = array(
        'title' => t('Properties'),
        'page callback' => 'eds_properties_check_parameters',
        'page arguments' => array(2, null, null),               
        'access callback' => 'user_access',
        'access arguments' => array('list properties'),                 
        'type' => MENU_IS_LOCAL_TASK
    );

    
    $items['eds/properties/get-slider-data'] = array(
        'page callback'           => 'eds_properties_get_slider_data', 
        'access callback' => 'user_access',
        'access arguments' => array('view property'),
        'type'               => MENU_CALLBACK
    ); 
        
    $items['eds/property/%/unpublish']= array(
        'page callback'           => 'eds_properties_unpublish', 
        'page arguments' => array(2),
        'access callback' => 'user_access',
        'access arguments' => array('view property'),
        'type'               => MENU_CALLBACK
    ); 
    
    $items['eds/property/%/vefiried']= array(
        'page callback'           => 'eds_properties_vefiried', 
        'page arguments' => array(2),
        'access callback' => 'user_access',
        'access arguments' => array('view property'),
        'type'               => MENU_CALLBACK
    );     
    
    $items['eds/property/send-question']= array(
        'page callback'           => 'question_form_submit', 
        'access callback' => 'user_access',
        'access arguments' => array('view property'),
        'type'               => MENU_CALLBACK
    ); 
                
    return $items;
}
function eds_properties_permission()
{
    return array(
        'view property' => array(
            'title' => 'view property'
        )
    );
}
/**
 * Turns an indexed array into an associative one, using the value as the key
 * alternatively if the value is formatted "key|value" it will split them
 * on the '|' character
 */
function eds_properties_prepare_options($array = array())
{
    $return = array();
        
    foreach ((array)$array as $a) {
        $key = $a;
        $value = "";
        
        if(strstr($a, "|")) 
            list($key, $value) = explode('|', $a, 2);

        if (!$value) {
            $value = $key;
        }
        $return[$key] = $value;
    }
    
    return $return;
}

/**
 * AJAX: returns a JSON object of the search results, rendered in HTML (and including some JS to execute)
 * The form on eds/properties will submit to this function.
 */
function eds_properties_property_search()
{
    if ($_REQUEST['page_limit']) {
        $_SESSION['page_limit'] = $_REQUEST['page_limit'];
    }
    if ($_SESSION['page_limit']) {
        $limit = $_SESSION['page_limit'];
    } else {
        $limit = 10;
    }
    
    if (array_key_exists('property_search', $_REQUEST)) {
        $_SESSION['property_search'] = $_REQUEST['property_search']; /* Save these to to use as the form defaults */
    }
    if (array_key_exists('page', $_REQUEST)) {
        $page = $_REQUEST['page'];
        $_SESSION['property_search']['page'] = $_REQUEST['page'];
    } else {
        unset($_SESSION['property_search']['page']);
        $page = 1;
    }
    
    list($query, $args, $where) = eds_properties_compose_query($_SESSION['property_search']);
    $nodes = array();
    $res = db_query($query, $args)->fetchAllAssoc('nid');

    $total = count($res);
    if ($total > $limit){
        $begin = $limit*($page-1);
        $res  = array_slice($res, $begin, $limit, true);

    }
    $cur_count = count($res);
    foreach($res as $key => $value){
        $tmp = node_load($key);
        if (!empty($tmp->field_property_photographs)){
            $in = array();
            foreach($tmp->field_property_photographs['und'] as $val_in){
                $in[] = $val_in['fid'];
            }      
            $img_query = db_select('file_managed')
            ->fields('file_managed', array('uri', 'fid'))
            ->condition('fid', $in, 'IN')
            ->execute()->fetchAllAssoc('fid');
            $photos = array();
            foreach($img_query as $val_img){
                $photos[] = file_create_url($val_img->uri);
            }
            $tmp->photos = $photos;
        }
        $nodes[] = node_load($key);
    }


    if (empty($nodes)) {
        $output = '<p>' . t('Your search did not match any properties.') . '</p>';
    } else {
        $output = theme('properties_search', array('nodes' => $nodes, 'limit' => $limit, 'cur_page' => $page, 'total' => $total, 'cur_count' => $cur_count));
    }

    $output_script  = '';
    if (preg_match('(\/\* <!\[CDATA\[ \*\/.*?\/\*\s\]\]\>\s\*\/)si', $output, $matches)) {
        $output_script .= ' if (Drupal.settings.gmap !== undefined) { delete Drupal.settings.gmap; }';
        $output_script .= implode(' ', $matches);
        $output_script .= 'Drupal.gmap.setup();';

        $output_script .= 'void_href();';
        $output = preg_replace('(<script[^>]*?>.*?</script>)si', '', $output);
    }
    
    drupal_add_http_header("Content-Type", "application/json; charset=utf-8");
    print drupal_json_encode(array('data' => $output, 'script' => $output_script));
	module_invoke_all('exit');
	exit; 
}


function eds_properties_theme($existing, $type, $theme, $path) {
    $themes = array (
        'view_properties' => array(
            'template' => 'templates/view_properties',
            'arguments' => array('search_form' => NULL),
        ),
        'eds_properties_content' => array(
            'template' => 'templates/eds_properties_content',
            'arguments' => array('nodes' => array(), 'limit' => 10),
        ),
        'eds_property' => array(
            'template' => 'templates/eds_property',
            'arguments' => array('node' => NULL, 'teaser' => false),
        ),
        'eds_property_address' => array(
            'template' => 'templates/eds_property_address',
            'arguments' => array('node' => NULL),
        ),
        'eds_property_photos' => array(
            'template' => 'templates/eds_property_photos',
            'arguments' => array('node' => NULL, 'teaser' => false),
        ),
        'eds_property_details' => array(
            'template' => 'templates/eds_property_details',
            'arguments' => array('node' => NULL),
        ),
        'eds_property_virtual_tours' => array(
            'template' => 'templates/eds_property_virtual_tours',
            'arguments' => array('node' => NULL),
        ),
        'eds_property_building_details' => array(
            'template' => 'templates/eds_property_building_details',
            'arguments' => array('node' => NULL),
        ),
        'eds_property_site_details' => array(
            'template' => 'templates/eds_property_site_details',
            'arguments' => array('node' => NULL),
        ),
        'eds_property_quicks' => array(
            'template' => 'templates/eds_property_quicks',
            'arguments' => array('node' => NULL),
        ),
        'eds_sq_ft' => array(
            'template' => 'templates/eds_sq_ft',
            'arguments' => array('value' => NULL),
        ),
        'properties_search' => array(
            'template' => 'templates/properties_search',
            'arguments' => array('nodes' => array(), 'limit' => 10, 'cur_page' => 1, 'total' => 0, 'cur_count' => 0),
        ),
        'eds_property_gmap_info' => array(
            'template' => 'templates/eds_property_gmap_info',
            'arguments' => array('node' => NULL),
        ),
        'eds_properties_export_api_keys_admin' => array(
            'template' => 'templates/eds_properties_export_api_keys_admin',
            'arguments' => array('form' => NULL),
        ),
    );
return $themes;
}

/**
 * Using the hook_forms() this function will create our forms for searching for properties.
 * This will be used for the Quick Search blocks as well as the eds/properties page
 */
function eds_properties_search_form_builder($a, $b, $action = '', $form_items = array(), $defaults, $delta = null)
{

    global $eds_property_defaults;

    $buildingTypes = variable_get('eds_properties_building_types');
    $propertyTypes = variable_get('eds_properties_property_types');
    $siteTypes = variable_get('eds_properties_site_types');
    $sqftSuffix = variable_get('eds_properties_sqft_suffix');
    $zoningTypes = variable_get('eds_properties_zoning_types');
    $searchFields = variable_get('eds_properties_search_fields');
    
    $default_building_types       = (count($buildingTypes) > 0 && isset($buildingTypes[0]) && $buildingTypes[0] != '') ? $buildingTypes : $eds_property_defaults['building_types'];
    $default_property_types       = (count($propertyTypes) > 0 && isset($propertyTypes[0]) && $propertyTypes[0] != '') ? $propertyTypes : $eds_property_defaults['property_types'];
    $default_site_types           = (count($siteTypes) > 0 && isset($siteTypes[0]) && $siteTypes[0] != '') ? $siteTypes : $eds_property_defaults['site_types'];
    $default_sqft_suffix          = (strlen($sqftSuffix) > 0) ? $sqftSuffix : $eds_property_defaults['sqft_suffix'];
    $default_zoning_types         = (count($zoningTypes) > 0 && isset($zoningTypes[0]) && $zoningTypes[0] != '' ) ? $zoningTypes : $eds_property_defaults['zoning_types'];
    $default_search_fields        = (count($searchFields) > 0 && isset($searchFields[0]) && $searchFields[0] != '') ? $searchFields : $eds_property_defaults['search_fields'];
    

    if (empty($form_items)) {
        return null;
    }
    $form = array();
    if ($action) {
        $form['#action'] = url($action);
    }

    $form['property_search'] = array('#tree' => true);

    if (in_array('property_type', $form_items)) {
        $form['property_search']['property_type'] = array(
          '#type' => 'radios',
          '#title' => t('Search'),
          '#options' => eds_properties_prepare_options($default_property_types),
          '#default_value' => $defaults['property_type'],
          '#attributes' => array('class' => array('property_type')),
          '#id' => 'property_type' . $delta,
        );
    }
    
    if (in_array('property_for_sale', $form_items)) {
        $form['property_search']['property_for_sale'] = array(
          '#type' => 'checkbox',
          '#title' => t('Property For Sale'),
          '#id' => 'property_for_sale' . $delta,
          '#default_value' => $defaults['property_for_sale'],
          '#attributes' => array('class' => array('property_for_sale')),
        );
    }
    
    if (in_array('property_for_lease', $form_items)) {
        $form['property_search']['property_for_lease'] = array(
          '#type' => 'checkbox',
          '#title' => t('Property For Lease'),
          '#id' => 'property_for_lease' . $delta,
          '#default_value' => $defaults['property_for_lease'],
          '#attributes' => array('class' => array('property_for_lease')),
        );
    }
    
    if (in_array('building_type', $form_items)) {
        array_unshift($default_building_types, t('|All Building Types'));
        $form['property_search']['building_type'] = array(
          '#type' => 'select',
          '#title' => t('Building Type'),
          '#options' => eds_properties_prepare_options($default_building_types),
          '#default_value' => $defaults['building_type'],
          '#id' => 'building_type' . $delta,
          '#attributes' => array('class' => array('building_type building-only'))
        );
    }

    if (in_array('site_type', $form_items)) {
        array_unshift($default_site_types, t('|All Site Types'));
        $form['property_search']['site_type'] = array(
          '#type' => 'select',
          '#title' => t('Site Type'),
          '#options' => eds_properties_prepare_options($default_site_types),
          '#default_value' => $defaults['site_type'],
          '#id' => 'site_type' . $delta,
          '#attributes' => array('class' => array('site_type site-only'))
        );
    }
    
    if (in_array('zoning_type', $form_items)) {
        array_unshift($default_zoning_types, t('|All Zoning Types'));
        $form['property_search']['zoning_type'] = array(
          '#type' => 'select',
          '#title' => t('Zoning Type'),
          '#options' => eds_properties_prepare_options($default_zoning_types),
          '#id' => 'zoning_type' . $delta,
          '#default_value' => $defaults['zoning_type'],
          '#attributes' => array('class' => array('zoning_type')),
        );
    }

    if (in_array('sq_footage', $form_items)) {
        $form['property_search']['sq_footage'] = array(
        	'#type'         => 'slider',
        	'#title'        => t('Min/Max Sq. Footage'),
        	'#name' 	    => 'sq_footage',
          	'#id' 	 	    => 'sq_footage' . $delta,
          	'#min_value'    => variable_get('eds_properties_sq_footage_min', 2000),
         	'#max_value'    => variable_get('eds_properties_sq_footage_max', 200000),
          	'#stepping'     => 1000,
          	'#parents'      => array('property_search'),
          	'#tree'         => true,
          	'#default_min'  => $defaults['sq_footage-min'],
          	'#default_max'  => $defaults['sq_footage-max'],
          	'#label_suffix' => 'Sq. Ft.',
           	'#label_prefix' => '',
            '#attributes' => array('class' => array('building-only sq_footage'))
        );
    }

    if (in_array('ceiling_height', $form_items)) {
        $form['property_search']['ceiling_height'] = array(
        	'#type'         => 'slider',
        	'#title'        => t('Min/Max Ceiling Height'),
        	'#name' 	    => 'ceiling_height',
          	'#id' 	 	    => 'ceiling_height' . $delta,
          	'#min_value'    => variable_get('eds_properties_ceiling_height_min', 16),
         	'#max_value'    => variable_get('eds_properties_ceiling_height_max', 50),
          	'#stepping'     => 1,
          	'#parents'      => array('property_search'),
          	'#default_min'  => $defaults['ceiling_height-min'],
          	'#default_max'  => $defaults['ceiling_height-max'],
          	'#label_suffix' => 'Ft.',
           	'#label_prefix' => '',
            '#attributes' => array('class' => array('building-only ceiling_height'))
        );
    }

    if (in_array('acreage', $form_items)) {
        $form['property_search']['acreage'] = array(
        	'#type'         => 'slider',
        	'#title'        => t('Min/Max Acreage'),
        	'#name' 	    => 'acreage',
          	'#id' 	 	    => 'acreage' . $delta,
          	'#min_value'    => variable_get('eds_properties_acreage_min', 1),
         	'#max_value'    => variable_get('eds_properties_acreage_max', 500),
          	'#min_value'    => 1,
         	'#max_value'    => 500, 
          	'#stepping'     => 1,
          	'#parents'      => array('property_search'),
          	'#default_min'  => $defaults['acreage-min'],
          	'#default_max'  => $defaults['acreage-max'],
          	'#label_suffix' => 'Ac.',
           	'#label_prefix' => '',
            '#attributes' => array('class' => array('acreage'))
        );
    }

    if (in_array('rail_access', $form_items)) {
        $form['property_search']['rail_access'] = array(
          '#type' => 'checkboxes',
          '#title' => t('Rail Service'),
          '#default_value' => $defaults['rail_access'],
          '#options' => array(YES => 'Yes', NO => 'No', POSSIBLE => 'Possible'),
          '#attributes' => array('class' => array('rail_access'))
        );
    }

    if (in_array('uid', $form_items)) {
        $roles = variable_get('eds_properties_search_by_author_roles', array());
        if (empty($roles)) {
            $results = db_query("SELECT uid, name FROM {users} WHERE uid > 0 ORDER BY name");
        } else {
            $results = db_query("SELECT DISTINCT u.uid, u.name FROM {users} u INNER JOIN {users_roles} ur ON u.uid = ur.uid WHERE ur.rid IN (%s)", implode(',', $roles));
        }
        while ($author = $results->fetchObject()) {
            $authors[$author->uid] = $author->name;
        }
        $authors = array("" => "") + $authors;
        array_unshift($default_building_types, t('|All Building Types'));
        $form['property_search']['uid'] = array(
          '#type' => 'select',
          '#title' => variable_get('eds_properties_search_by_author_roles_label', t('Realtor')),
          '#options' => $authors,
          '#default_value' => $defaults['uid'],
          '#id' => 'uid' . $delta,
          '#attributes' => array('class' => array('uid'))
        );
    }

    if ($delta !== null) {
        $form['count'] = array(
            '#markup' => '<p class="count"></p>'
        );
    } else {
        $search_fields = eds_properties_prepare_options($default_search_fields);
        asort($search_fields);
        $form['property_search']['sort_by'] = array(
            '#type' => 'select',
            '#title' => t('Sort Results By'),
            '#options' => $search_fields,
            '#default_value' => $defaults['sort_by'],
            '#id' => 'sort_by',
        );
        $form['property_search']['sort_type'] = array(
            '#type' => 'select',
            '#options' => array('ASC' => t('Ascending'), 'DESC' => t('Descending')),
            '#default_value' => $defaults['sort_type'],
            '#id' => 'sort_type',
        );
    }
    

    $form['property_search']['submit'] = array('#type' => 'submit', '#value' => t('Search'));
    //$form['property_search']['reset'] = array('#type' => 'reset', '#id' => 'reset' . $delta, '#value' => t('Reset'), '#attributes' => array('class' => array('edit-reset')));
    
    $form['property_search']['reset'] = array(
    '#markup' => '<button class="edit-reset" id="reset' . $delta .'" type="reset">'. t('Reset') .'</button>',
    '#weight' => 1000
  );
    
    $form['#attributes'] = array('class' => array('properties-search'));
    global $theme;

    $form['#pre_render'] = array($theme . '_alter_properties_search_block');
    return $form;
}

function eds_properties_user($op, &$edit, &$user, $category = NULL)
{
    if ($op == 'view') {
        global $eds_property_defaults;
        $fields = variable_get('eds_properties_filter_fields', $eds_property_defaults['filter_fields']);
        if (in_array('uid', $fields)) {
            $items['eds_properties_link'] = array('title' => t('Property Search Link'), 'value' => l(t('View My Properties'), 'eds/properties', array(), 'property_search%5Buid%5D=' . $user->uid), false, true);
            return array(t('Property Search Link') => $items);
        }
    }
}


/**
 * Implementation of hook_view()
 */
function eds_properties_node_view($node, $view_mode, $langcode)
{

    return $node;
}

/**
 * This is the function called to build the eds/properties page.
 */
function eds_properties_view_properties()
{
    if (array_key_exists('property_search', $_REQUEST)) {
        $_SESSION['property_search'] = $_REQUEST['property_search']; /* Save these to to use as the form defaults */
    }

    /* Manually load all the gmap stuff we'll need */
    _gmap_doheader();
    drupal_add_js('http://maps.googleapis.com/maps/api/js?v=3&language=en&sensor=false&libraries=geometry');
    $path = drupal_get_path('module', 'gmap') .'/js/';
    drupal_add_js($path . 'gmap.js');
    drupal_add_js($path . 'icon.js');
    drupal_add_js($path . 'marker.js');
    drupal_add_js($path . 'highlight.js');
    drupal_add_js(variable_get('file_public_path', conf_path() . '/files')  . '/js/gmap_markers.js');
    drupal_add_js($path . 'gmap_marker.js');
    drupal_add_js($path . 'poly.js');
    
    /* Add in the report css/js files */
    eds_report_add_files();
    
    drupal_add_css(drupal_get_path('module', 'eds_properties') . '/support/css/properties.css', 'module');
    drupal_add_css(drupal_get_path('module', 'eds_properties') . '/support/css/print/properties.css', array('type' => 'file', 'media' => 'print'));
    drupal_add_js(drupal_get_path('module', 'eds_properties') . '/js/properties.js');
    drupal_add_js(drupal_get_path('module', 'eds_properties') . '/js/gmap_icon.js', 'module', 'footer');
    drupal_add_js(drupal_get_path('module', 'eds_properties') . '/js/map.js');
    
    if (isset($_REQUEST['page'])) {
        drupal_add_js('jQuery(document).ready(function() { setTimeout(function() { start++; update(start, ' . $_REQUEST['page'] . '); }, delay) })', 'inline', 'footer');
    } else {
        drupal_add_js('jQuery(document).ready(function() { setTimeout(function() { start++; update(start); }, delay) });', 'inline', 'footer');
    }
    
    $search_form = drupal_get_form('eds_properties_search_form');
//eds_properties_cron(); exit;
    return theme('view_properties', array('search_form' => $search_form));
}

/**
 * This is the function called to build the stuff that will be used to embed the property search.
 */
function eds_properties_view_properties_embed()
{
    $html = eds_properties_view_properties();
    $head = drupal_set_html_head();
    
    $replace_fetchPage = 'function fetchPage(id, viewUrl)
    {
        jQuery("#ajax-busy").show();
        jQuery.getJSON(viewUrl, {id: id}, function(json) {
            jQuery(id).html(json.data);
            
            jQuery("td.property-more-information a").attr("target", "_top");

            jQuery("div.pager a").each(function() {
                var data = jQuery(this).attr("href");
        	    jQuery(this).click(function() {
        	        fetchPage("#ajax-properties", data);
        	    });
                jQuery(this).attr("href", "javascript:void(0);");
        	});

            eval(json.script);
            if (currentMapStyle && typeof currentMapStyle == "object") {
                var style = {};
                jQuery.each(currentMapStyle, function(i, val) { style[i] = val; });
                jQuery(currentMapId).css(style);
            } else {
                jQuery(currentMapId).attr("style", currentMapStyle);
            }
            jQuery("#ajax-busy").hide();
    	});

    	return false;
    }';
    drupal_add_js($replace_fetchPage, 'inline');
    
    $javascript = drupal_add_js();
    $js = '';
    foreach ($javascript as $type => $data) {
        if (!$data) continue;

        switch ($type) {
          case 'setting':
            $js .= '<script type="text/javascript">Drupal.extend({ settings: '. drupal_to_js(call_user_func_array('array_merge_recursive', $data)) ." });</script>\n";
            break;
          case 'inline':
            foreach ($data as $info) {
              $js .= '<script type="text/javascript"'. ($info['defer'] ? ' defer="defer"' : '') .'>'. $info['code'] ."</script>\n";
            }
            break;
          default:
            foreach ($data as $path => $info) {
              $js .= '<script type="text/javascript"'. ($info['defer'] ? ' defer="defer"' : '') .' src="' . $GLOBALS['base_url'] . check_url(base_path() . $path) . ($info['cache'] ? '' : '?'. time()) ."\"></script>\n";
            }
        }
    }
    
    $css_files = array("/modules/system/defaults.css",
                       "/modules/system/system.css",
                       "sites/all/modules/edsuite/support/css/slider.css",
                       "sites/all/modules/edsuite/eds_properties/3rdparty/gmap/gmap.css",
                       "sites/all/modules/edsuite/eds_properties/support/css/properties.css",
                       path_to_theme() . "/css/eds/properties-embed.css",
                       );
        $css = '';
    foreach ($css_files as $css_file) {
            $css .= '<style type="text/css">@import "'. $GLOBALS['base_url'] . base_path() . $css_file .'";</style>' ."\n";
    }
    $output = $head . $css . $js . $html . '<script type="text/javascript">jQuery(document).ready(function() {start++; update(start);})' ."</script>\n";
    
    print $output;
	module_invoke_all('exit');
	exit; 
}


function eds_properties_check_parameters($uid, $nid, $action) {

    if(is_null($uid) && is_null($action)) {
        $node = node_load($nid); 
        return node_page_view($node);
    }
    
    if(!is_null($action)) {
        
        $node = node_load($nid);
        
        switch($action) {
            case 'view':
                return node_page_view($node);
                break;
            case 'edit':
                if(node_access('update', $node)) {
                    return node_page_edit($node);
                } else {
                    drupal_access_denied();
                    module_invoke_all('exit');
                    exit;
                }
                break;
            case 'delete': 
                if(node_access('delete', $node)) {
                    return node_page_delete($node);
                } else {
                    drupal_access_denied();
                    module_invoke_all('exit');
                    exit;
                }
                break;
        }
    }
    
    if(!is_null($uid)) {
        return  eds_properties_content_view($uid);
    }
}

function eds_properties_get_slider_data() {
    $propertyType = $_POST['type'];
    $min = $_POST['min'];
    $max = $_POST['max'];
    $segments = $_POST['segments'];
    $field = $_POST['field'];
    $segment = floor(($max - $min) / $segments);
    $segmentsResult = array();
    
    for($i = 0; $i < $segments; $i++) {

        $myMin = $min;
        $myMax = $min + $segment;

        $query = "SELECT n.nid FROM {node} n
        LEFT JOIN {field_data_field_property_type} property_type on property_type.entity_id = n.nid    
        LEFT JOIN {field_data_field_". $field ."} t on t.entity_id = n.nid
        WHERE n.type = 'eds_properties' AND
              property_type.field_property_type_value = :property_type AND
              n.status = 1 AND
              t.field_". $field ."_value >= :min_value AND
              t.field_". $field ."_value < :max_value";
        if ($i == $segments - 1){
            $myMax = $max;
            $query = "SELECT n.nid FROM {node} n
        LEFT JOIN {field_data_field_property_type} property_type on property_type.entity_id = n.nid
        LEFT JOIN {field_data_field_". $field ."} t on t.entity_id = n.nid
        WHERE n.type = 'eds_properties' AND
              property_type.field_property_type_value = :property_type AND
              n.status = 1 AND
              t.field_". $field ."_value >= :min_value AND
              t.field_". $field ."_value <= :max_value";
        }
        
       //var_dump($query, $myMin, $myMax); 
        
       $res = db_query($query, array(':min_value' => $myMin, ':max_value' => $myMax, ':property_type' => $propertyType))->fetchAllAssoc('nid');
       $segmentsResult[] = count($res);
       $min += $segment;
    }
    
    echo json_encode(array('status' => true, 'values' => $segmentsResult)); die;
}

function eds_properties_unpublish($nid) {
    $node = node_load($nid);
    $node->status = 0;
    node_save($node);
    
    drupal_goto($GLOBALS['base_url']);
    
}

function eds_properties_vefiried($nid) {
    $node = node_load($nid);
    $node->field_verified['und'][0]['value'] = 0;
    node_save($node);
    
    drupal_goto($GLOBALS['base_url']);  
}
/**
 * Prepares an alternate list of properties to the admin.
 */
function eds_properties_content_view($uid = null)
{
    $limit = 10;
    $nodes = array();
    
    $query = "SELECT n.nid FROM {node} n
        WHERE n.type = 'eds_properties' AND n.uid = :uid";
    
    $res = db_query($query, array(':uid' => $uid));
    
    while($v = $res->fetchAssoc()) {

        $nodes[] = node_load($v['nid']);
    }

    drupal_add_css(drupal_get_path('module', 'eds_properties') . '/support/css/properties_content_view.css', 'module');
    $output = theme('eds_properties_content', array('nodes' => $nodes, 'limit' => $limit));
    return $output;
}

/*
 * export property
 */
function eds_properties_export_csv($nid) {
    
    $node = node_load($nid);
    
    if(is_object($node)) {
    
        $strTitles = property_export_title($node, 'csv');
        $strValues = property_export_values($node, 'csv');
        
        $fileName = preg_replace("/[^a-z0-9-]/", "_", strtolower($node->title));
        
        // We'll be outputting a PDF
        header('Content-type: application/octetstream');

        // It will be called downloaded.pdf
        header('Content-Disposition: attachment; filename="property_'. $fileName .'_'. date("d_m_Y_h_i") .'.csv"');


        echo $strTitles .$strValues; die; 
    }
}

function property_export_title($node, $format = 'csv') {
    
        $fields = field_info_instances('node', 'eds_properties');
        $strTitles = '"Title"';

        foreach($fields as $field_instance) {
            $field = $node->{$field_instance['field_name']};
            //$info = field_info_field($field_instance['field_name']);      

            switch($format) {
                case 'csv':
                default:

                    $strTitles .= ',"' . $field_instance['label'].'"';
 

                    break;
            }

        }
        
        return $strTitles . "\n";
}

function property_export_values($node, $format = 'csv') {
        $fields = field_info_instances('node', 'eds_properties');

        $strValues = '"'.$node->title.'"';

        foreach($fields as $field_instance) {
            $field = $node->{$field_instance['field_name']};
    
            switch($format) {
                case 'csv':
                default:
                    
                    if(isset($field['und'][0]['value'])) {
                        $str = str_replace('"', "'", $field['und'][0]['value']);
                        $str = str_replace("\n", " ", $str);
                        $strValues .= ',"' . $str .'"';
                    }
                        else
                    {
                        $strValues .= ',""';
                    }
                    
                    break;
            }

        }
        
        return $strValues . "\n";
}

function eds_properties_export_csv_all() {

    $strTitles = property_export_title($node, 'csv');
    $strValues = '';
    
    if(isset($_SESSION['nodes_in_report']['eds_properties'])) {
        
        foreach($_SESSION['nodes_in_report']['eds_properties'] as $nid) {
            $node = node_load($nid);
            
            if(is_object($node))
                $strValues .= property_export_values($node, 'csv');
        }
        
        // We'll be outputting a PDF
        header('Content-type: text/csv');

        // It will be called downloaded.pdf
        header('Content-Disposition: attachment; filename="properties_'. date("d_m_Y_h_i") .'.csv"');
        header("Pragma: no-cache");
        header("Expires: 0");

        echo $strTitles . $strValues; die;
    }
}